
bin/Debug/Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  0000132a  000013be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00001302  00001302  00001396  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000009b  00800178  00800178  00001436  2**0
                  ALLOC
  4 .stab         000015d8  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000b06  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003516  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003528  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000040fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00004118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_18>
      4c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e2       	ldi	r30, 0x2A	; 42
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 37       	cpi	r26, 0x78	; 120
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a8 e7       	ldi	r26, 0x78	; 120
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 31       	cpi	r26, 0x13	; 19
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 91 02 	call	0x522	; 0x522 <main>
      9e:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_init>:
 static unsigned int count[] = {0,0};
 static unsigned int limit[] = {0,0};

 /**
*/
static void delay_init(){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62

    // set timer0 compare for 1ms tick = 1000hz
    // prescalar will be 64 and atmega328p has clock of 16mhz
    // 16M/64 = 250khz.
    // compare = 250k/1000 - 1 = 249
    OCR0A = 249;
      ae:	87 e4       	ldi	r24, 0x47	; 71
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	29 ef       	ldi	r18, 0xF9	; 249
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18

    // Set CTC mode
    TCCR0A |= 0x02;
      b8:	84 e4       	ldi	r24, 0x44	; 68
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	24 e4       	ldi	r18, 0x44	; 68
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	f9 01       	movw	r30, r18
      c2:	20 81       	ld	r18, Z
      c4:	22 60       	ori	r18, 0x02	; 2
      c6:	fc 01       	movw	r30, r24
      c8:	20 83       	st	Z, r18

    // Set clock divisor
    // need a prescalar of 64 which means setting prescalar
    // bit to 011b.
    TCCR0B |= 0x03;
      ca:	85 e4       	ldi	r24, 0x45	; 69
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	25 e4       	ldi	r18, 0x45	; 69
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	f9 01       	movw	r30, r18
      d4:	20 81       	ld	r18, Z
      d6:	23 60       	ori	r18, 0x03	; 3
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18

    // Enable interrupts on output compare A
    TIMSK0 |= 0x02;
      dc:	8e e6       	ldi	r24, 0x6E	; 110
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	2e e6       	ldi	r18, 0x6E	; 110
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	f9 01       	movw	r30, r18
      e6:	20 81       	ld	r18, Z
      e8:	22 60       	ori	r18, 0x02	; 2
      ea:	fc 01       	movw	r30, r24
      ec:	20 83       	st	Z, r18

    // set initialized to 1?
}
      ee:	00 00       	nop
      f0:	df 91       	pop	r29
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <get_global_interrupt_state>:

static unsigned char get_global_interrupt_state(){
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
    return (SREG & 0x80);
      fe:	8f e5       	ldi	r24, 0x5F	; 95
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	fc 01       	movw	r30, r24
     104:	80 81       	ld	r24, Z
     106:	80 78       	andi	r24, 0x80	; 128
}
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	08 95       	ret

0000010e <set_global_interrupt_state>:

static void set_global_interrupt_state(unsigned char state){
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	1f 92       	push	r1
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	89 83       	std	Y+1, r24	; 0x01
    SREG |= state;
     11a:	8f e5       	ldi	r24, 0x5F	; 95
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	2f e5       	ldi	r18, 0x5F	; 95
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	30 81       	ld	r19, Z
     126:	29 81       	ldd	r18, Y+1	; 0x01
     128:	23 2b       	or	r18, r19
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
}
     12e:	00 00       	nop
     130:	0f 90       	pop	r0
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <__vector_14>:
/**
This function is what gets called when the timer0 interrupt is triggered.
It increments the count for each timer
*/
void __vector_14(void) __attribute__ ((signal, used, externally_visible));
void __vector_14(void){
     138:	1f 92       	push	r1
     13a:	0f 92       	push	r0
     13c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     140:	0f 92       	push	r0
     142:	11 24       	eor	r1, r1
     144:	2f 93       	push	r18
     146:	3f 93       	push	r19
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	ef 93       	push	r30
     14e:	ff 93       	push	r31
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <__vector_14+0x1e>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
    // increment the count for each timer as long as it is not greater than or equal to the limit
    for(int n = 0; n < NUM_TIMERS; n++ ){
     15a:	1a 82       	std	Y+2, r1	; 0x02
     15c:	19 82       	std	Y+1, r1	; 0x01
     15e:	2f c0       	rjmp	.+94     	; 0x1be <__vector_14+0x86>
        if(count[n] < limit[n]){
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	88 58       	subi	r24, 0x88	; 136
     16a:	9e 4f       	sbci	r25, 0xFE	; 254
     16c:	fc 01       	movw	r30, r24
     16e:	20 81       	ld	r18, Z
     170:	31 81       	ldd	r19, Z+1	; 0x01
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	84 58       	subi	r24, 0x84	; 132
     17c:	9e 4f       	sbci	r25, 0xFE	; 254
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	28 17       	cp	r18, r24
     186:	39 07       	cpc	r19, r25
     188:	a8 f4       	brcc	.+42     	; 0x1b4 <__vector_14+0x7c>
            count[n]++;
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	88 58       	subi	r24, 0x88	; 136
     194:	9e 4f       	sbci	r25, 0xFE	; 254
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	91 81       	ldd	r25, Z+1	; 0x01
     19c:	9c 01       	movw	r18, r24
     19e:	2f 5f       	subi	r18, 0xFF	; 255
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	9a 81       	ldd	r25, Y+2	; 0x02
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	88 58       	subi	r24, 0x88	; 136
     1ac:	9e 4f       	sbci	r25, 0xFE	; 254
     1ae:	fc 01       	movw	r30, r24
     1b0:	31 83       	std	Z+1, r19	; 0x01
     1b2:	20 83       	st	Z, r18
It increments the count for each timer
*/
void __vector_14(void) __attribute__ ((signal, used, externally_visible));
void __vector_14(void){
    // increment the count for each timer as long as it is not greater than or equal to the limit
    for(int n = 0; n < NUM_TIMERS; n++ ){
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	9a 81       	ldd	r25, Y+2	; 0x02
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	9a 83       	std	Y+2, r25	; 0x02
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	9a 81       	ldd	r25, Y+2	; 0x02
     1c2:	02 97       	sbiw	r24, 0x02	; 2
     1c4:	6c f2       	brlt	.-102    	; 0x160 <__vector_14+0x28>
        if(count[n] < limit[n]){
            count[n]++;
        }
    }
}
     1c6:	00 00       	nop
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	ff 91       	pop	r31
     1d2:	ef 91       	pop	r30
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	3f 91       	pop	r19
     1da:	2f 91       	pop	r18
     1dc:	0f 90       	pop	r0
     1de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     1e2:	0f 90       	pop	r0
     1e4:	1f 90       	pop	r1
     1e6:	18 95       	reti

000001e8 <delay_get>:
    Global interrupts are temporarily disabled. They are restored to previous state before returning.
NOTE - make sure you call delay_set before calling get other wise the results likely
will not mean anything relevant.

*/
unsigned delay_get(unsigned num){
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <delay_get+0x6>
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <delay_get+0x8>
     1f0:	1f 92       	push	r1
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	9d 83       	std	Y+5, r25	; 0x05
     1f8:	8c 83       	std	Y+4, r24	; 0x04
    // Get current global interrupt enable bit state
    unsigned char saved_interrupt_state = get_global_interrupt_state();
     1fa:	0e 94 7b 00 	call	0xf6	; 0xf6 <get_global_interrupt_state>
     1fe:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    __builtin_avr_cli();
     200:	f8 94       	cli

    // Get the count[n] value
    unsigned int count_n = count[num];
     202:	8c 81       	ldd	r24, Y+4	; 0x04
     204:	9d 81       	ldd	r25, Y+5	; 0x05
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	88 58       	subi	r24, 0x88	; 136
     20c:	9e 4f       	sbci	r25, 0xFE	; 254
     20e:	fc 01       	movw	r30, r24
     210:	80 81       	ld	r24, Z
     212:	91 81       	ldd	r25, Z+1	; 0x01
     214:	9b 83       	std	Y+3, r25	; 0x03
     216:	8a 83       	std	Y+2, r24	; 0x02

    // Restore saved global interrupt state
    set_global_interrupt_state(saved_interrupt_state);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	0e 94 87 00 	call	0x10e	; 0x10e <set_global_interrupt_state>

    // return the count
    return count_n;
     21e:	8a 81       	ldd	r24, Y+2	; 0x02
     220:	9b 81       	ldd	r25, Y+3	; 0x03
}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <delay_set>:
changes:
    Global interrupts are temporarily disabled. They are restored to previous state before returning.


*/
void  delay_set(unsigned int num, unsigned int msec){
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	00 d0       	rcall	.+0      	; 0x238 <delay_set+0x6>
     238:	00 d0       	rcall	.+0      	; 0x23a <delay_set+0x8>
     23a:	1f 92       	push	r1
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	9b 83       	std	Y+3, r25	; 0x03
     242:	8a 83       	std	Y+2, r24	; 0x02
     244:	7d 83       	std	Y+5, r23	; 0x05
     246:	6c 83       	std	Y+4, r22	; 0x04
    static int initialized = 0;
    // if delay has not been initialized, then call init()
    if(initialized == 0){
     248:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <initialized.1593>
     24c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <initialized.1593+0x1>
     250:	89 2b       	or	r24, r25
     252:	41 f4       	brne	.+16     	; 0x264 <delay_set+0x32>
        delay_init();
     254:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_init>
        initialized = 1;
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <initialized.1593+0x1>
     260:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <initialized.1593>
    }

    // get global interrupt state
    unsigned char saved_interrupt_state = get_global_interrupt_state();
     264:	0e 94 7b 00 	call	0xf6	; 0xf6 <get_global_interrupt_state>
     268:	89 83       	std	Y+1, r24	; 0x01

    // disable interrupts
    __builtin_avr_cli();
     26a:	f8 94       	cli

    // set the limit[n] and reset count[n] to 0
    limit[num] = msec;
     26c:	8a 81       	ldd	r24, Y+2	; 0x02
     26e:	9b 81       	ldd	r25, Y+3	; 0x03
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	84 58       	subi	r24, 0x84	; 132
     276:	9e 4f       	sbci	r25, 0xFE	; 254
     278:	2c 81       	ldd	r18, Y+4	; 0x04
     27a:	3d 81       	ldd	r19, Y+5	; 0x05
     27c:	fc 01       	movw	r30, r24
     27e:	31 83       	std	Z+1, r19	; 0x01
     280:	20 83       	st	Z, r18
    count[num] = 0;
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	9b 81       	ldd	r25, Y+3	; 0x03
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	88 58       	subi	r24, 0x88	; 136
     28c:	9e 4f       	sbci	r25, 0xFE	; 254
     28e:	fc 01       	movw	r30, r24
     290:	11 82       	std	Z+1, r1	; 0x01
     292:	10 82       	st	Z, r1

    // Restore saved state of global interrupts
    set_global_interrupt_state(saved_interrupt_state);
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	0e 94 87 00 	call	0x10e	; 0x10e <set_global_interrupt_state>


}
     29a:	00 00       	nop
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <delay_isdone>:
    None

NOTE - make sure you call delay_set before calling get other wise the results likely
will not mean anything relevant.
*/
unsigned delay_isdone(unsigned int num){
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <delay_isdone+0x6>
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <delay_isdone+0x8>
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	9c 83       	std	Y+4, r25	; 0x04
     2ba:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int result = 0;
     2bc:	1a 82       	std	Y+2, r1	; 0x02
     2be:	19 82       	std	Y+1, r1	; 0x01
    if(count[num] == limit[num]){
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	9c 81       	ldd	r25, Y+4	; 0x04
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	88 58       	subi	r24, 0x88	; 136
     2ca:	9e 4f       	sbci	r25, 0xFE	; 254
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 81       	ld	r18, Z
     2d0:	31 81       	ldd	r19, Z+1	; 0x01
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	84 58       	subi	r24, 0x84	; 132
     2dc:	9e 4f       	sbci	r25, 0xFE	; 254
     2de:	fc 01       	movw	r30, r24
     2e0:	80 81       	ld	r24, Z
     2e2:	91 81       	ldd	r25, Z+1	; 0x01
     2e4:	28 17       	cp	r18, r24
     2e6:	39 07       	cpc	r19, r25
     2e8:	21 f4       	brne	.+8      	; 0x2f2 <delay_isdone+0x46>
        result = 1;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
    }

    return result;
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <set_delay_and_led>:

 static char* blink_msg;
 static unsigned int blink_pos; // which character of the message is currently being blinked
 static unsigned char blink_state;

 static void set_delay_and_led(char c){
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	89 83       	std	Y+1, r24	; 0x01
    switch(c){
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	08 2e       	mov	r0, r24
     314:	00 0c       	add	r0, r0
     316:	99 0b       	sbc	r25, r25
     318:	8d 32       	cpi	r24, 0x2D	; 45
     31a:	91 05       	cpc	r25, r1
     31c:	31 f0       	breq	.+12     	; 0x32a <set_delay_and_led+0x26>
     31e:	8e 32       	cpi	r24, 0x2E	; 46
     320:	91 05       	cpc	r25, r1
     322:	61 f0       	breq	.+24     	; 0x33c <set_delay_and_led+0x38>
     324:	80 97       	sbiw	r24, 0x20	; 32
     326:	99 f0       	breq	.+38     	; 0x34e <set_delay_and_led+0x4a>
     328:	1b c0       	rjmp	.+54     	; 0x360 <set_delay_and_led+0x5c>
        case '-':
            led_on();
     32a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <led_on>
            delay_set(0,750);
     32e:	6e ee       	ldi	r22, 0xEE	; 238
     330:	72 e0       	ldi	r23, 0x02	; 2
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
            break;
     33a:	1b c0       	rjmp	.+54     	; 0x372 <set_delay_and_led+0x6e>
        case '.':
            led_on();
     33c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <led_on>
            delay_set(0,250);
     340:	6a ef       	ldi	r22, 0xFA	; 250
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
            break;
     34c:	12 c0       	rjmp	.+36     	; 0x372 <set_delay_and_led+0x6e>
        case ' ':
            led_off();
     34e:	0e 94 de 03 	call	0x7bc	; 0x7bc <led_off>
            delay_set(0,1000);
     352:	68 ee       	ldi	r22, 0xE8	; 232
     354:	73 e0       	ldi	r23, 0x03	; 3
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
            break;
     35e:	09 c0       	rjmp	.+18     	; 0x372 <set_delay_and_led+0x6e>
        default:
            led_off();
     360:	0e 94 de 03 	call	0x7bc	; 0x7bc <led_off>
            delay_set(0,0);
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
            break;
     370:	00 00       	nop
        }
 }
     372:	00 00       	nop
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <led_set_blink>:

 void led_set_blink(char* msg){
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	00 d0       	rcall	.+0      	; 0x382 <led_set_blink+0x6>
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	89 83       	std	Y+1, r24	; 0x01
     // initialize message
    blink_msg = msg;
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <blink_msg+0x1>
     392:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <blink_msg>
    blink_pos = 0;
     396:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <blink_pos+0x1>
     39a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <blink_pos>

    // reset FSM
    blink_state = PHASE1;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <blink_state>
    delay_set(0,0);
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
    led_off();
     3b0:	0e 94 de 03 	call	0x7bc	; 0x7bc <led_off>
 }
     3b4:	00 00       	nop
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <led_update>:

 void led_update(){
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     // if the message to blink is empty return
     if(blink_msg == '\0'){
     3c8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <blink_msg>
     3cc:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <blink_msg+0x1>
     3d0:	89 2b       	or	r24, r25
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <led_update+0x16>
     3d4:	9c c0       	rjmp	.+312    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
        return;
     }

     // if the delay is not done return
     if(!delay_isdone(0)){
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 56 01 	call	0x2ac	; 0x2ac <delay_isdone>
     3de:	89 2b       	or	r24, r25
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <led_update+0x24>
     3e2:	97 c0       	rjmp	.+302    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
        return;
     }

     // update the finite state machine
     switch(blink_state){
     3e4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <blink_state>
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	91 05       	cpc	r25, r1
     3f0:	21 f0       	breq	.+8      	; 0x3fa <led_update+0x3a>
     3f2:	02 97       	sbiw	r24, 0x02	; 2
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <led_update+0x38>
     3f6:	55 c0       	rjmp	.+170    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     3f8:	91 c0       	rjmp	.+290    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
         case PHASE1:
             if(delay_isdone(0) && blink_msg[blink_pos] != ' '){
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 56 01 	call	0x2ac	; 0x2ac <delay_isdone>
     402:	89 2b       	or	r24, r25
     404:	d1 f0       	breq	.+52     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     406:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <blink_msg>
     40a:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <blink_msg+0x1>
     40e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
     412:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	fc 01       	movw	r30, r24
     41c:	80 81       	ld	r24, Z
     41e:	80 32       	cpi	r24, 0x20	; 32
     420:	61 f0       	breq	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
                // set state to Phase 2 and turn off led for 100 ms.
                blink_state = PHASE2;
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <blink_state>
                led_off();
     428:	0e 94 de 03 	call	0x7bc	; 0x7bc <led_off>
                delay_set(0, 100);
     42c:	64 e6       	ldi	r22, 0x64	; 100
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
                }
                else{
                    blink_pos = 0;
                }
             }
            break;
     438:	6e c0       	rjmp	.+220    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
                // set state to Phase 2 and turn off led for 100 ms.
                blink_state = PHASE2;
                led_off();
                delay_set(0, 100);
             }
             else if(delay_isdone(0) && blink_msg[blink_pos] == ' '){
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 56 01 	call	0x2ac	; 0x2ac <delay_isdone>
     442:	89 2b       	or	r24, r25
     444:	09 f4       	brne	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	67 c0       	rjmp	.+206    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     448:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <blink_msg>
     44c:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <blink_msg+0x1>
     450:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
     454:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
     458:	82 0f       	add	r24, r18
     45a:	93 1f       	adc	r25, r19
     45c:	fc 01       	movw	r30, r24
     45e:	80 81       	ld	r24, Z
     460:	80 32       	cpi	r24, 0x20	; 32
     462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	58 c0       	rjmp	.+176    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
                if(blink_msg[blink_pos + 1] != 0){
     466:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <blink_msg>
     46a:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <blink_msg+0x1>
     46e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
     472:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	82 0f       	add	r24, r18
     47a:	93 1f       	adc	r25, r19
     47c:	fc 01       	movw	r30, r24
     47e:	80 81       	ld	r24, Z
     480:	88 23       	and	r24, r24
     482:	51 f0       	breq	.+20     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
                    blink_pos ++;
     484:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
     488:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <blink_pos+0x1>
     492:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <blink_pos>
                }
                else{
                    blink_pos = 0;
                }
             }
            break;
     496:	3f c0       	rjmp	.+126    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
             else if(delay_isdone(0) && blink_msg[blink_pos] == ' '){
                if(blink_msg[blink_pos + 1] != 0){
                    blink_pos ++;
                }
                else{
                    blink_pos = 0;
     498:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <blink_pos+0x1>
     49c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <blink_pos>
                }
             }
            break;
     4a0:	3a c0       	rjmp	.+116    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
         case PHASE2:
             if(delay_isdone(0)){
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 56 01 	call	0x2ac	; 0x2ac <delay_isdone>
     4aa:	89 2b       	or	r24, r25
     4ac:	b1 f1       	breq	.+108    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
                if(blink_msg[blink_pos+1] != '\0'){
     4ae:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <blink_msg>
     4b2:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <blink_msg+0x1>
     4b6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
     4ba:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	fc 01       	movw	r30, r24
     4c6:	80 81       	ld	r24, Z
     4c8:	88 23       	and	r24, r24
     4ca:	51 f0       	breq	.+20     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
                    blink_pos++;
     4cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
     4d0:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <blink_pos+0x1>
     4da:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <blink_pos>
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
                }
                else{
                    blink_pos = 0;
     4e0:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <blink_pos+0x1>
     4e4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <blink_pos>
                }

                // set the state to PHASE 1 and set the corresponding led state and delay
                blink_state = PHASE1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <blink_state>
                set_delay_and_led(blink_msg[blink_pos]);
     4ee:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <blink_msg>
     4f2:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <blink_msg+0x1>
     4f6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <blink_pos>
     4fa:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <blink_pos+0x1>
     4fe:	82 0f       	add	r24, r18
     500:	93 1f       	adc	r25, r19
     502:	fc 01       	movw	r30, r24
     504:	80 81       	ld	r24, Z
     506:	0e 94 82 01 	call	0x304	; 0x304 <set_delay_and_led>
             }
            break;
     50a:	00 00       	nop
     50c:	06 c0       	rjmp	.+12     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 }

 void led_update(){
     // if the message to blink is empty return
     if(blink_msg == '\0'){
        return;
     50e:	00 00       	nop
     510:	05 c0       	rjmp	.+10     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     }

     // if the delay is not done return
     if(!delay_isdone(0)){
        return;
     512:	00 00       	nop
     514:	03 c0       	rjmp	.+6      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
                }
                else{
                    blink_pos = 0;
                }
             }
            break;
     516:	00 00       	nop
     518:	01 c0       	rjmp	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>

                // set the state to PHASE 1 and set the corresponding led state and delay
                blink_state = PHASE1;
                set_delay_and_led(blink_msg[blink_pos]);
             }
            break;
     51a:	00 00       	nop
     }
 }
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <main>:




int main(void)
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	28 97       	sbiw	r28, 0x08	; 8
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
    //TODO
    //initialize uart, led and rtc
    uart_init();
     536:	0e 94 44 07 	call	0xe88	; 0xe88 <uart_init>
    led_init();
     53a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <led_init>
    rtc_init();
     53e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <rtc_init>

    // TODO
    // Set default led morse code to OK
    led_set_blink("--- -.-");
     542:	84 e1       	ldi	r24, 0x14	; 20
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 be 01 	call	0x37c	; 0x37c <led_set_blink>

    // initialize rtc date/time
    rtc_set_by_datestr("01/01/2019 00:00:00");
     54a:	8c e1       	ldi	r24, 0x1C	; 28
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 14 04 	call	0x828	; 0x828 <rtc_set_by_datestr>

    // Print assignment details to console
    uart_writestr("SER 486 Project 1 - Jared Ham\n\r");
     552:	80 e3       	ldi	r24, 0x30	; 48
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 4a 07 	call	0xe94	; 0xe94 <uart_writestr>

       /* get baseline performance */
    signed long c1=0;
     55a:	19 82       	std	Y+1, r1	; 0x01
     55c:	1a 82       	std	Y+2, r1	; 0x02
     55e:	1b 82       	std	Y+3, r1	; 0x03
     560:	1c 82       	std	Y+4, r1	; 0x04
    delay_set(1,10000); while (!delay_isdone(1)) { c1++; }
     562:	60 e1       	ldi	r22, 0x10	; 16
     564:	77 e2       	ldi	r23, 0x27	; 39
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
     56e:	0b c0       	rjmp	.+22     	; 0x586 <main+0x64>
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	9a 81       	ldd	r25, Y+2	; 0x02
     574:	ab 81       	ldd	r26, Y+3	; 0x03
     576:	bc 81       	ldd	r27, Y+4	; 0x04
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	a1 1d       	adc	r26, r1
     57c:	b1 1d       	adc	r27, r1
     57e:	89 83       	std	Y+1, r24	; 0x01
     580:	9a 83       	std	Y+2, r25	; 0x02
     582:	ab 83       	std	Y+3, r26	; 0x03
     584:	bc 83       	std	Y+4, r27	; 0x04
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 56 01 	call	0x2ac	; 0x2ac <delay_isdone>
     58e:	89 2b       	or	r24, r25
     590:	79 f3       	breq	.-34     	; 0x570 <main+0x4e>

    /* measure performance with led_update */
    signed long c2=0;
     592:	1d 82       	std	Y+5, r1	; 0x05
     594:	1e 82       	std	Y+6, r1	; 0x06
     596:	1f 82       	std	Y+7, r1	; 0x07
     598:	18 86       	std	Y+8, r1	; 0x08
    delay_set(1,10000); while (!delay_isdone(1)) { led_update(); c2++; }
     59a:	60 e1       	ldi	r22, 0x10	; 16
     59c:	77 e2       	ldi	r23, 0x27	; 39
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
     5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <main+0xa0>
     5a8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <led_update>
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	9e 81       	ldd	r25, Y+6	; 0x06
     5b0:	af 81       	ldd	r26, Y+7	; 0x07
     5b2:	b8 85       	ldd	r27, Y+8	; 0x08
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	a1 1d       	adc	r26, r1
     5b8:	b1 1d       	adc	r27, r1
     5ba:	8d 83       	std	Y+5, r24	; 0x05
     5bc:	9e 83       	std	Y+6, r25	; 0x06
     5be:	af 83       	std	Y+7, r26	; 0x07
     5c0:	b8 87       	std	Y+8, r27	; 0x08
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 56 01 	call	0x2ac	; 0x2ac <delay_isdone>
     5ca:	89 2b       	or	r24, r25
     5cc:	69 f3       	breq	.-38     	; 0x5a8 <main+0x86>

    /* display the results */
    uart_writedec32(c1); uart_writestr(" ");
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	ab 81       	ldd	r26, Y+3	; 0x03
     5d4:	bc 81       	ldd	r27, Y+4	; 0x04
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_writedec32>
     5de:	80 e5       	ldi	r24, 0x50	; 80
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 4a 07 	call	0xe94	; 0xe94 <uart_writestr>
    uart_writedec32(c2); uart_writestr("\r\n");
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	af 81       	ldd	r26, Y+7	; 0x07
     5ec:	b8 85       	ldd	r27, Y+8	; 0x08
     5ee:	bc 01       	movw	r22, r24
     5f0:	cd 01       	movw	r24, r26
     5f2:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_writedec32>
     5f6:	82 e5       	ldi	r24, 0x52	; 82
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 4a 07 	call	0xe94	; 0xe94 <uart_writestr>

    //set the delay 1 counter
    delay_set(1,0);
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>

    while(1){
        if(delay_isdone(1)){
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 56 01 	call	0x2ac	; 0x2ac <delay_isdone>
     612:	89 2b       	or	r24, r25
     614:	71 f0       	breq	.+28     	; 0x632 <main+0x110>
            delay_set(1,500);
     616:	64 ef       	ldi	r22, 0xF4	; 244
     618:	71 e0       	ldi	r23, 0x01	; 1
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 19 01 	call	0x232	; 0x232 <delay_set>
            uart_writestr(rtc_get_date_string());
     622:	0e 94 c4 06 	call	0xd88	; 0xd88 <rtc_get_date_string>
     626:	0e 94 4a 07 	call	0xe94	; 0xe94 <uart_writestr>
            uart_writestr("\r");
     62a:	85 e5       	ldi	r24, 0x55	; 85
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 4a 07 	call	0xe94	; 0xe94 <uart_writestr>
        }
        led_update();
     632:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <led_update>
    }
     636:	e9 cf       	rjmp	.-46     	; 0x60a <main+0xe8>

00000638 <get_global_interrupt_state>:
#define OCR1AH (*((volatile char *)0x89))
#define OCR1AL (*((volatile char *)0x88))

static volatile unsigned long count = 0;

static unsigned char get_global_interrupt_state(){
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
    return (SREG & 0x80);
     640:	8f e5       	ldi	r24, 0x5F	; 95
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	80 78       	andi	r24, 0x80	; 128
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <set_global_interrupt_state>:

static void set_global_interrupt_state(unsigned char state){
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	1f 92       	push	r1
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	89 83       	std	Y+1, r24	; 0x01
    SREG |= state;
     65c:	8f e5       	ldi	r24, 0x5F	; 95
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	2f e5       	ldi	r18, 0x5F	; 95
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	30 81       	ld	r19, Z
     668:	29 81       	ldd	r18, Y+1	; 0x01
     66a:	23 2b       	or	r18, r19
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
}
     670:	00 00       	nop
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <__vector_11>:
/**
This function is what gets called when the timer1 interrupt is triggered.
It increments the count each time it is called
*/
void __vector_11(void) __attribute__ ((signal, used, externally_visible));
void __vector_11(void){
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	af 93       	push	r26
     68c:	bf 93       	push	r27
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
    // increment the count
    count++;
     696:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <count>
     69a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <count+0x1>
     69e:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <count+0x2>
     6a2:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <count+0x3>
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	a1 1d       	adc	r26, r1
     6aa:	b1 1d       	adc	r27, r1
     6ac:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <count>
     6b0:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <count+0x1>
     6b4:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <count+0x2>
     6b8:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <count+0x3>
}
     6bc:	00 00       	nop
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	bf 91       	pop	r27
     6c4:	af 91       	pop	r26
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	0f 90       	pop	r0
     6cc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6d0:	0f 90       	pop	r0
     6d2:	1f 90       	pop	r1
     6d4:	18 95       	reti

000006d6 <timer1_init>:

/* initialize timer1 for a 1 second periodic tick */
void timer1_init(){
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62

    // prescalar will be 64 and atmega328p has clock of 16mhz
    // 16M/256 = 62.5khz.
    // compare = 62.5k/1 - 1 = 62,499 = 0xF423
    OCR1AH = 0xF4;
     6de:	89 e8       	ldi	r24, 0x89	; 137
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	24 ef       	ldi	r18, 0xF4	; 244
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
    OCR1AL = 0x23;
     6e8:	88 e8       	ldi	r24, 0x88	; 136
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	23 e2       	ldi	r18, 0x23	; 35
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18

    // Set CTC mode
    TCCR1B |= 0x08;
     6f2:	81 e8       	ldi	r24, 0x81	; 129
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	21 e8       	ldi	r18, 0x81	; 129
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	f9 01       	movw	r30, r18
     6fc:	20 81       	ld	r18, Z
     6fe:	28 60       	ori	r18, 0x08	; 8
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18

    // Set clock divisor
    // need a prescalar of 256 which means setting prescalar
    // bit to 100b.
    TCCR1B |= 0x04;
     704:	81 e8       	ldi	r24, 0x81	; 129
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	21 e8       	ldi	r18, 0x81	; 129
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	f9 01       	movw	r30, r18
     70e:	20 81       	ld	r18, Z
     710:	24 60       	ori	r18, 0x04	; 4
     712:	fc 01       	movw	r30, r24
     714:	20 83       	st	Z, r18

    // Enable interrupts on output compare A
    TIMSK1 |= 0x02;
     716:	8f e6       	ldi	r24, 0x6F	; 111
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	2f e6       	ldi	r18, 0x6F	; 111
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	22 60       	ori	r18, 0x02	; 2
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18

}
     728:	00 00       	nop
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <timer1_get>:

/* return the tick count value */
unsigned long timer1_get(){
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	00 d0       	rcall	.+0      	; 0x736 <timer1_get+0x6>
     736:	00 d0       	rcall	.+0      	; 0x738 <timer1_get+0x8>
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62

    // Get current global interrupt enable bit state
    unsigned char saved_interrupt_state = get_global_interrupt_state();
     73e:	0e 94 1c 03 	call	0x638	; 0x638 <get_global_interrupt_state>
     742:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    __builtin_avr_cli();
     744:	f8 94       	cli

    // Get the count[n] value
    unsigned long cur_count = count;
     746:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <count>
     74a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <count+0x1>
     74e:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <count+0x2>
     752:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <count+0x3>
     756:	8a 83       	std	Y+2, r24	; 0x02
     758:	9b 83       	std	Y+3, r25	; 0x03
     75a:	ac 83       	std	Y+4, r26	; 0x04
     75c:	bd 83       	std	Y+5, r27	; 0x05

    // Restore saved global interrupt state
    set_global_interrupt_state(saved_interrupt_state);
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	0e 94 28 03 	call	0x650	; 0x650 <set_global_interrupt_state>

    // return the count
    return cur_count;
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	9b 81       	ldd	r25, Y+3	; 0x03
     768:	ac 81       	ldd	r26, Y+4	; 0x04
     76a:	bd 81       	ldd	r27, Y+5	; 0x05

}
     76c:	bc 01       	movw	r22, r24
     76e:	cd 01       	movw	r24, r26
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <timer1_clear>:

/* clear the value of the tick counter */
void timer1_clear(){
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	1f 92       	push	r1
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     // Get current global interrupt enable bit state
    unsigned char saved_interrupt_state = get_global_interrupt_state();
     78a:	0e 94 1c 03 	call	0x638	; 0x638 <get_global_interrupt_state>
     78e:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    __builtin_avr_cli();
     790:	f8 94       	cli

    // set count to 0
    count = 0;
     792:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <count>
     796:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <count+0x1>
     79a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <count+0x2>
     79e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <count+0x3>

    // Restore saved global interrupt state
    set_global_interrupt_state(saved_interrupt_state);
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	0e 94 28 03 	call	0x650	; 0x650 <set_global_interrupt_state>

}
     7a8:	00 00       	nop
     7aa:	0f 90       	pop	r0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <led_init>:
     7b2:	21 9a       	sbi	0x04, 1	; 4
     7b4:	29 98       	cbi	0x05, 1	; 5
     7b6:	08 95       	ret

000007b8 <led_on>:
     7b8:	29 9a       	sbi	0x05, 1	; 5
     7ba:	08 95       	ret

000007bc <led_off>:
     7bc:	29 98       	cbi	0x05, 1	; 5
     7be:	08 95       	ret

000007c0 <led_is_on>:
     7c0:	85 b1       	in	r24, 0x05	; 5
     7c2:	86 95       	lsr	r24
     7c4:	81 70       	andi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	08 95       	ret

000007ca <rtc_init>:
     7ca:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <timer1_init>

000007ce <rtc_get_date>:
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	0e 94 98 03 	call	0x730	; 0x730 <timer1_get>
     7d6:	00 91 8f 01 	lds	r16, 0x018F	; 0x80018f <rtc_base>
     7da:	10 91 90 01 	lds	r17, 0x0190	; 0x800190 <rtc_base+0x1>
     7de:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <rtc_base+0x2>
     7e2:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <rtc_base+0x3>
     7e6:	60 0f       	add	r22, r16
     7e8:	71 1f       	adc	r23, r17
     7ea:	82 1f       	adc	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <is_leapyear>:
     7f4:	9c 01       	movw	r18, r24
     7f6:	60 e9       	ldi	r22, 0x90	; 144
     7f8:	71 e0       	ldi	r23, 0x01	; 1
     7fa:	0e 94 10 09 	call	0x1220	; 0x1220 <__udivmodhi4>
     7fe:	89 2b       	or	r24, r25
     800:	79 f0       	breq	.+30     	; 0x820 <is_leapyear+0x2c>
     802:	c9 01       	movw	r24, r18
     804:	83 70       	andi	r24, 0x03	; 3
     806:	99 27       	eor	r25, r25
     808:	89 2b       	or	r24, r25
     80a:	61 f4       	brne	.+24     	; 0x824 <is_leapyear+0x30>
     80c:	c9 01       	movw	r24, r18
     80e:	64 e6       	ldi	r22, 0x64	; 100
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 10 09 	call	0x1220	; 0x1220 <__udivmodhi4>
     816:	9c 01       	movw	r18, r24
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	23 2b       	or	r18, r19
     81c:	21 f4       	brne	.+8      	; 0x826 <is_leapyear+0x32>
     81e:	02 c0       	rjmp	.+4      	; 0x824 <is_leapyear+0x30>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	08 95       	ret

00000828 <rtc_set_by_datestr>:
     828:	2f 92       	push	r2
     82a:	3f 92       	push	r3
     82c:	4f 92       	push	r4
     82e:	5f 92       	push	r5
     830:	6f 92       	push	r6
     832:	7f 92       	push	r7
     834:	8f 92       	push	r8
     836:	9f 92       	push	r9
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	67 97       	sbiw	r28, 0x17	; 23
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	2c e0       	ldi	r18, 0x0C	; 12
     85e:	e7 e5       	ldi	r30, 0x57	; 87
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	ae 01       	movw	r20, r28
     864:	4f 5f       	subi	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	1a 01       	movw	r2, r20
     86a:	da 01       	movw	r26, r20
     86c:	01 90       	ld	r0, Z+
     86e:	0d 92       	st	X+, r0
     870:	2a 95       	dec	r18
     872:	e1 f7       	brne	.-8      	; 0x86c <rtc_set_by_datestr+0x44>
     874:	dc 01       	movw	r26, r24
     876:	2c 91       	ld	r18, X
     878:	22 0f       	add	r18, r18
     87a:	20 56       	subi	r18, 0x60	; 96
     87c:	32 2f       	mov	r19, r18
     87e:	33 0f       	add	r19, r19
     880:	33 0f       	add	r19, r19
     882:	23 0f       	add	r18, r19
     884:	11 96       	adiw	r26, 0x01	; 1
     886:	3c 91       	ld	r19, X
     888:	11 97       	sbiw	r26, 0x01	; 1
     88a:	31 53       	subi	r19, 0x31	; 49
     88c:	23 0f       	add	r18, r19
     88e:	2d 87       	std	Y+13, r18	; 0x0d
     890:	13 96       	adiw	r26, 0x03	; 3
     892:	2c 91       	ld	r18, X
     894:	13 97       	sbiw	r26, 0x03	; 3
     896:	02 2e       	mov	r0, r18
     898:	00 0c       	add	r0, r0
     89a:	33 0b       	sbc	r19, r19
     89c:	20 53       	subi	r18, 0x30	; 48
     89e:	31 09       	sbc	r19, r1
     8a0:	6a e0       	ldi	r22, 0x0A	; 10
     8a2:	62 9f       	mul	r22, r18
     8a4:	a0 01       	movw	r20, r0
     8a6:	63 9f       	mul	r22, r19
     8a8:	50 0d       	add	r21, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	14 96       	adiw	r26, 0x04	; 4
     8ae:	cc 90       	ld	r12, X
     8b0:	0c 2c       	mov	r0, r12
     8b2:	00 0c       	add	r0, r0
     8b4:	dd 08       	sbc	r13, r13
     8b6:	b0 e3       	ldi	r27, 0x30	; 48
     8b8:	cb 1a       	sub	r12, r27
     8ba:	d1 08       	sbc	r13, r1
     8bc:	c4 0e       	add	r12, r20
     8be:	d5 1e       	adc	r13, r21
     8c0:	86 01       	movw	r16, r12
     8c2:	01 50       	subi	r16, 0x01	; 1
     8c4:	11 09       	sbc	r17, r1
     8c6:	fc 01       	movw	r30, r24
     8c8:	26 81       	ldd	r18, Z+6	; 0x06
     8ca:	02 2e       	mov	r0, r18
     8cc:	00 0c       	add	r0, r0
     8ce:	33 0b       	sbc	r19, r19
     8d0:	20 53       	subi	r18, 0x30	; 48
     8d2:	31 09       	sbc	r19, r1
     8d4:	e8 ee       	ldi	r30, 0xE8	; 232
     8d6:	f3 e0       	ldi	r31, 0x03	; 3
     8d8:	2e 9f       	mul	r18, r30
     8da:	a0 01       	movw	r20, r0
     8dc:	2f 9f       	mul	r18, r31
     8de:	50 0d       	add	r21, r0
     8e0:	3e 9f       	mul	r19, r30
     8e2:	50 0d       	add	r21, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	dc 01       	movw	r26, r24
     8e8:	17 96       	adiw	r26, 0x07	; 7
     8ea:	2c 91       	ld	r18, X
     8ec:	17 97       	sbiw	r26, 0x07	; 7
     8ee:	02 2e       	mov	r0, r18
     8f0:	00 0c       	add	r0, r0
     8f2:	33 0b       	sbc	r19, r19
     8f4:	20 53       	subi	r18, 0x30	; 48
     8f6:	31 09       	sbc	r19, r1
     8f8:	74 e6       	ldi	r23, 0x64	; 100
     8fa:	72 9f       	mul	r23, r18
     8fc:	70 01       	movw	r14, r0
     8fe:	73 9f       	mul	r23, r19
     900:	f0 0c       	add	r15, r0
     902:	11 24       	eor	r1, r1
     904:	e4 0e       	add	r14, r20
     906:	f5 1e       	adc	r15, r21
     908:	18 96       	adiw	r26, 0x08	; 8
     90a:	4c 91       	ld	r20, X
     90c:	18 97       	sbiw	r26, 0x08	; 8
     90e:	04 2e       	mov	r0, r20
     910:	00 0c       	add	r0, r0
     912:	55 0b       	sbc	r21, r21
     914:	40 53       	subi	r20, 0x30	; 48
     916:	51 09       	sbc	r21, r1
     918:	64 9f       	mul	r22, r20
     91a:	90 01       	movw	r18, r0
     91c:	65 9f       	mul	r22, r21
     91e:	30 0d       	add	r19, r0
     920:	11 24       	eor	r1, r1
     922:	e2 0e       	add	r14, r18
     924:	f3 1e       	adc	r15, r19
     926:	19 96       	adiw	r26, 0x09	; 9
     928:	2c 91       	ld	r18, X
     92a:	19 97       	sbiw	r26, 0x09	; 9
     92c:	f7 01       	movw	r30, r14
     92e:	e2 0f       	add	r30, r18
     930:	f1 1d       	adc	r31, r1
     932:	27 fd       	sbrc	r18, 7
     934:	fa 95       	dec	r31
     936:	af 01       	movw	r20, r30
     938:	58 50       	subi	r21, 0x08	; 8
     93a:	7a 01       	movw	r14, r20
     93c:	1b 96       	adiw	r26, 0x0b	; 11
     93e:	2c 91       	ld	r18, X
     940:	1b 97       	sbiw	r26, 0x0b	; 11
     942:	22 0f       	add	r18, r18
     944:	20 56       	subi	r18, 0x60	; 96
     946:	32 2f       	mov	r19, r18
     948:	33 0f       	add	r19, r19
     94a:	33 0f       	add	r19, r19
     94c:	23 0f       	add	r18, r19
     94e:	1c 96       	adiw	r26, 0x0c	; 12
     950:	3c 91       	ld	r19, X
     952:	1c 97       	sbiw	r26, 0x0c	; 12
     954:	30 53       	subi	r19, 0x30	; 48
     956:	23 0f       	add	r18, r19
     958:	29 8b       	std	Y+17, r18	; 0x11
     95a:	1e 96       	adiw	r26, 0x0e	; 14
     95c:	2c 91       	ld	r18, X
     95e:	1e 97       	sbiw	r26, 0x0e	; 14
     960:	22 0f       	add	r18, r18
     962:	20 56       	subi	r18, 0x60	; 96
     964:	32 2f       	mov	r19, r18
     966:	33 0f       	add	r19, r19
     968:	33 0f       	add	r19, r19
     96a:	23 0f       	add	r18, r19
     96c:	1f 96       	adiw	r26, 0x0f	; 15
     96e:	3c 91       	ld	r19, X
     970:	1f 97       	sbiw	r26, 0x0f	; 15
     972:	30 53       	subi	r19, 0x30	; 48
     974:	23 0f       	add	r18, r19
     976:	2a 8b       	std	Y+18, r18	; 0x12
     978:	51 96       	adiw	r26, 0x11	; 17
     97a:	2c 91       	ld	r18, X
     97c:	51 97       	sbiw	r26, 0x11	; 17
     97e:	22 0f       	add	r18, r18
     980:	20 56       	subi	r18, 0x60	; 96
     982:	32 2f       	mov	r19, r18
     984:	33 0f       	add	r19, r19
     986:	33 0f       	add	r19, r19
     988:	23 0f       	add	r18, r19
     98a:	52 96       	adiw	r26, 0x12	; 18
     98c:	8c 91       	ld	r24, X
     98e:	80 53       	subi	r24, 0x30	; 48
     990:	28 0f       	add	r18, r24
     992:	2b 8b       	std	Y+19, r18	; 0x13
     994:	ca 01       	movw	r24, r20
     996:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <is_leapyear>
     99a:	88 23       	and	r24, r24
     99c:	21 f0       	breq	.+8      	; 0x9a6 <__stack+0xa7>
     99e:	5d 85       	ldd	r21, Y+13	; 0x0d
     9a0:	52 30       	cpi	r21, 0x02	; 2
     9a2:	08 f0       	brcs	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	86 01       	movw	r16, r12
     9a6:	c7 01       	movw	r24, r14
     9a8:	60 e9       	ldi	r22, 0x90	; 144
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	0e 94 10 09 	call	0x1220	; 0x1220 <__udivmodhi4>
     9b0:	fc 01       	movw	r30, r24
     9b2:	db 01       	movw	r26, r22
     9b4:	20 e8       	ldi	r18, 0x80	; 128
     9b6:	39 e5       	ldi	r19, 0x59	; 89
     9b8:	40 e6       	ldi	r20, 0x60	; 96
     9ba:	50 ef       	ldi	r21, 0xF0	; 240
     9bc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__muluhisi3>
     9c0:	2b 01       	movw	r4, r22
     9c2:	3c 01       	movw	r6, r24
     9c4:	cf 01       	movw	r24, r30
     9c6:	64 e6       	ldi	r22, 0x64	; 100
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 10 09 	call	0x1220	; 0x1220 <__udivmodhi4>
     9ce:	fc 01       	movw	r30, r24
     9d0:	db 01       	movw	r26, r22
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	32 ec       	ldi	r19, 0xC2	; 194
     9d6:	47 e1       	ldi	r20, 0x17	; 23
     9d8:	5c eb       	ldi	r21, 0xBC	; 188
     9da:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__muluhisi3>
     9de:	4b 01       	movw	r8, r22
     9e0:	5c 01       	movw	r10, r24
     9e2:	df 01       	movw	r26, r30
     9e4:	b6 95       	lsr	r27
     9e6:	a7 95       	ror	r26
     9e8:	b6 95       	lsr	r27
     9ea:	a7 95       	ror	r26
     9ec:	20 e8       	ldi	r18, 0x80	; 128
     9ee:	3f e1       	ldi	r19, 0x1F	; 31
     9f0:	46 e8       	ldi	r20, 0x86	; 134
     9f2:	57 e0       	ldi	r21, 0x07	; 7
     9f4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__muluhisi3>
     9f8:	6b 01       	movw	r12, r22
     9fa:	7c 01       	movw	r14, r24
     9fc:	df 01       	movw	r26, r30
     9fe:	a3 70       	andi	r26, 0x03	; 3
     a00:	bb 27       	eor	r27, r27
     a02:	20 e8       	ldi	r18, 0x80	; 128
     a04:	33 e3       	ldi	r19, 0x33	; 51
     a06:	41 ee       	ldi	r20, 0xE1	; 225
     a08:	51 e0       	ldi	r21, 0x01	; 1
     a0a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__muluhisi3>
     a0e:	6c 8b       	std	Y+20, r22	; 0x14
     a10:	7d 8b       	std	Y+21, r23	; 0x15
     a12:	8e 8b       	std	Y+22, r24	; 0x16
     a14:	9f 8b       	std	Y+23, r25	; 0x17
     a16:	f1 01       	movw	r30, r2
     a18:	8e 2f       	mov	r24, r30
     a1a:	82 19       	sub	r24, r2
     a1c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a1e:	89 17       	cp	r24, r25
     a20:	20 f4       	brcc	.+8      	; 0xa2a <__stack+0x12b>
     a22:	81 91       	ld	r24, Z+
     a24:	08 0f       	add	r16, r24
     a26:	11 1d       	adc	r17, r1
     a28:	f7 cf       	rjmp	.-18     	; 0xa18 <__stack+0x119>
     a2a:	a9 89       	ldd	r26, Y+17	; 0x11
     a2c:	2a 2f       	mov	r18, r26
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	a0 e1       	ldi	r26, 0x10	; 16
     a32:	be e0       	ldi	r27, 0x0E	; 14
     a34:	0e 94 65 09 	call	0x12ca	; 0x12ca <__umulhisi3>
     a38:	6d 87       	std	Y+13, r22	; 0x0d
     a3a:	7e 87       	std	Y+14, r23	; 0x0e
     a3c:	8f 87       	std	Y+15, r24	; 0x0f
     a3e:	98 8b       	std	Y+16, r25	; 0x10
     a40:	ba 89       	ldd	r27, Y+18	; 0x12
     a42:	2b 2f       	mov	r18, r27
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	ac e3       	ldi	r26, 0x3C	; 60
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	0e 94 65 09 	call	0x12ca	; 0x12ca <__umulhisi3>
     a4e:	2d 85       	ldd	r18, Y+13	; 0x0d
     a50:	3e 85       	ldd	r19, Y+14	; 0x0e
     a52:	4f 85       	ldd	r20, Y+15	; 0x0f
     a54:	58 89       	ldd	r21, Y+16	; 0x10
     a56:	26 0f       	add	r18, r22
     a58:	37 1f       	adc	r19, r23
     a5a:	48 1f       	adc	r20, r24
     a5c:	59 1f       	adc	r21, r25
     a5e:	da 01       	movw	r26, r20
     a60:	c9 01       	movw	r24, r18
     a62:	3b 89       	ldd	r19, Y+19	; 0x13
     a64:	83 0f       	add	r24, r19
     a66:	91 1d       	adc	r25, r1
     a68:	a1 1d       	adc	r26, r1
     a6a:	b1 1d       	adc	r27, r1
     a6c:	48 0e       	add	r4, r24
     a6e:	59 1e       	adc	r5, r25
     a70:	6a 1e       	adc	r6, r26
     a72:	7b 1e       	adc	r7, r27
     a74:	84 0c       	add	r8, r4
     a76:	95 1c       	adc	r9, r5
     a78:	a6 1c       	adc	r10, r6
     a7a:	b7 1c       	adc	r11, r7
     a7c:	c8 0c       	add	r12, r8
     a7e:	d9 1c       	adc	r13, r9
     a80:	ea 1c       	adc	r14, r10
     a82:	fb 1c       	adc	r15, r11
     a84:	8c 89       	ldd	r24, Y+20	; 0x14
     a86:	9d 89       	ldd	r25, Y+21	; 0x15
     a88:	ae 89       	ldd	r26, Y+22	; 0x16
     a8a:	bf 89       	ldd	r27, Y+23	; 0x17
     a8c:	c8 0e       	add	r12, r24
     a8e:	d9 1e       	adc	r13, r25
     a90:	ea 1e       	adc	r14, r26
     a92:	fb 1e       	adc	r15, r27
     a94:	d8 01       	movw	r26, r16
     a96:	20 e8       	ldi	r18, 0x80	; 128
     a98:	31 e5       	ldi	r19, 0x51	; 81
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__muluhisi3>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	8c 0d       	add	r24, r12
     aa8:	9d 1d       	adc	r25, r13
     aaa:	ae 1d       	adc	r26, r14
     aac:	bf 1d       	adc	r27, r15
     aae:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <rtc_base>
     ab2:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <rtc_base+0x1>
     ab6:	a0 93 91 01 	sts	0x0191, r26	; 0x800191 <rtc_base+0x2>
     aba:	b0 93 92 01 	sts	0x0192, r27	; 0x800192 <rtc_base+0x3>
     abe:	67 96       	adiw	r28, 0x17	; 23
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	6f 90       	pop	r6
     ae6:	5f 90       	pop	r5
     ae8:	4f 90       	pop	r4
     aea:	3f 90       	pop	r3
     aec:	2f 90       	pop	r2
     aee:	0c 94 c0 03 	jmp	0x780	; 0x780 <timer1_clear>

00000af2 <get_month>:
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	68 97       	sbiw	r28, 0x18	; 24
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	7b 01       	movw	r14, r22
     b10:	2c e0       	ldi	r18, 0x0C	; 12
     b12:	e7 e5       	ldi	r30, 0x57	; 87
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	de 01       	movw	r26, r28
     b18:	1d 96       	adiw	r26, 0x0d	; 13
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	2a 95       	dec	r18
     b20:	e1 f7       	brne	.-8      	; 0xb1a <get_month+0x28>
     b22:	8e 01       	movw	r16, r28
     b24:	0f 5f       	subi	r16, 0xFF	; 255
     b26:	1f 4f       	sbci	r17, 0xFF	; 255
     b28:	2c e0       	ldi	r18, 0x0C	; 12
     b2a:	f8 01       	movw	r30, r16
     b2c:	11 92       	st	Z+, r1
     b2e:	2a 95       	dec	r18
     b30:	e9 f7       	brne	.-6      	; 0xb2c <get_month+0x3a>
     b32:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <is_leapyear>
     b36:	8a 83       	std	Y+2, r24	; 0x02
     b38:	de 01       	movw	r26, r28
     b3a:	1d 96       	adiw	r26, 0x0d	; 13
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	f7 01       	movw	r30, r14
     b40:	40 81       	ld	r20, Z
     b42:	51 81       	ldd	r21, Z+1	; 0x01
     b44:	9d 91       	ld	r25, X+
     b46:	f8 01       	movw	r30, r16
     b48:	21 91       	ld	r18, Z+
     b4a:	8f 01       	movw	r16, r30
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	29 0f       	add	r18, r25
     b50:	31 1d       	adc	r19, r1
     b52:	42 17       	cp	r20, r18
     b54:	53 07       	cpc	r21, r19
     b56:	40 f0       	brcs	.+16     	; 0xb68 <get_month+0x76>
     b58:	42 1b       	sub	r20, r18
     b5a:	53 0b       	sbc	r21, r19
     b5c:	f7 01       	movw	r30, r14
     b5e:	51 83       	std	Z+1, r21	; 0x01
     b60:	40 83       	st	Z, r20
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	8c 30       	cpi	r24, 0x0C	; 12
     b66:	59 f7       	brne	.-42     	; 0xb3e <get_month+0x4c>
     b68:	68 96       	adiw	r28, 0x18	; 24
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	08 95       	ret

00000b82 <rtc_num2datestr>:
     b82:	4f 92       	push	r4
     b84:	5f 92       	push	r5
     b86:	6f 92       	push	r6
     b88:	7f 92       	push	r7
     b8a:	8f 92       	push	r8
     b8c:	9f 92       	push	r9
     b8e:	af 92       	push	r10
     b90:	bf 92       	push	r11
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <rtc_num2datestr+0x1e>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	2b 01       	movw	r4, r22
     ba6:	3c 01       	movw	r6, r24
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	20 e8       	ldi	r18, 0x80	; 128
     bb2:	42 16       	cp	r4, r18
     bb4:	29 e5       	ldi	r18, 0x59	; 89
     bb6:	52 06       	cpc	r5, r18
     bb8:	20 e6       	ldi	r18, 0x60	; 96
     bba:	62 06       	cpc	r6, r18
     bbc:	20 ef       	ldi	r18, 0xF0	; 240
     bbe:	72 06       	cpc	r7, r18
     bc0:	18 f4       	brcc	.+6      	; 0xbc8 <rtc_num2datestr+0x46>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	dc 01       	movw	r26, r24
     bc8:	20 e9       	ldi	r18, 0x90	; 144
     bca:	31 e0       	ldi	r19, 0x01	; 1
     bcc:	82 9f       	mul	r24, r18
     bce:	50 01       	movw	r10, r0
     bd0:	83 9f       	mul	r24, r19
     bd2:	b0 0c       	add	r11, r0
     bd4:	92 9f       	mul	r25, r18
     bd6:	b0 0c       	add	r11, r0
     bd8:	11 24       	eor	r1, r1
     bda:	80 e3       	ldi	r24, 0x30	; 48
     bdc:	a8 1a       	sub	r10, r24
     bde:	88 ef       	ldi	r24, 0xF8	; 248
     be0:	b8 0a       	sbc	r11, r24
     be2:	c1 2c       	mov	r12, r1
     be4:	d1 2c       	mov	r13, r1
     be6:	76 01       	movw	r14, r12
     be8:	c3 94       	inc	r12
     bea:	20 e8       	ldi	r18, 0x80	; 128
     bec:	42 16       	cp	r4, r18
     bee:	29 e5       	ldi	r18, 0x59	; 89
     bf0:	52 06       	cpc	r5, r18
     bf2:	20 e6       	ldi	r18, 0x60	; 96
     bf4:	62 06       	cpc	r6, r18
     bf6:	20 ef       	ldi	r18, 0xF0	; 240
     bf8:	72 06       	cpc	r7, r18
     bfa:	18 f4       	brcc	.+6      	; 0xc02 <rtc_num2datestr+0x80>
     bfc:	c1 2c       	mov	r12, r1
     bfe:	d1 2c       	mov	r13, r1
     c00:	76 01       	movw	r14, r12
     c02:	a7 01       	movw	r20, r14
     c04:	96 01       	movw	r18, r12
     c06:	60 e8       	ldi	r22, 0x80	; 128
     c08:	79 e5       	ldi	r23, 0x59	; 89
     c0a:	80 e6       	ldi	r24, 0x60	; 96
     c0c:	90 ef       	ldi	r25, 0xF0	; 240
     c0e:	0e 94 00 09 	call	0x1200	; 0x1200 <__mulsi3>
     c12:	73 01       	movw	r14, r6
     c14:	62 01       	movw	r12, r4
     c16:	c6 1a       	sub	r12, r22
     c18:	d7 0a       	sbc	r13, r23
     c1a:	e8 0a       	sbc	r14, r24
     c1c:	f9 0a       	sbc	r15, r25
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	a0 e0       	ldi	r26, 0x00	; 0
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	c1 14       	cp	r12, r1
     c28:	22 ec       	ldi	r18, 0xC2	; 194
     c2a:	d2 06       	cpc	r13, r18
     c2c:	27 e1       	ldi	r18, 0x17	; 23
     c2e:	e2 06       	cpc	r14, r18
     c30:	2c eb       	ldi	r18, 0xBC	; 188
     c32:	f2 06       	cpc	r15, r18
     c34:	18 f4       	brcc	.+6      	; 0xc3c <rtc_num2datestr+0xba>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	dc 01       	movw	r26, r24
     c3c:	44 e6       	ldi	r20, 0x64	; 100
     c3e:	48 9f       	mul	r20, r24
     c40:	90 01       	movw	r18, r0
     c42:	49 9f       	mul	r20, r25
     c44:	30 0d       	add	r19, r0
     c46:	11 24       	eor	r1, r1
     c48:	a2 0e       	add	r10, r18
     c4a:	b3 1e       	adc	r11, r19
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	c1 14       	cp	r12, r1
     c56:	82 ec       	ldi	r24, 0xC2	; 194
     c58:	d8 06       	cpc	r13, r24
     c5a:	87 e1       	ldi	r24, 0x17	; 23
     c5c:	e8 06       	cpc	r14, r24
     c5e:	8c eb       	ldi	r24, 0xBC	; 188
     c60:	f8 06       	cpc	r15, r24
     c62:	18 f4       	brcc	.+6      	; 0xc6a <rtc_num2datestr+0xe8>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	a9 01       	movw	r20, r18
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	72 ec       	ldi	r23, 0xC2	; 194
     c6e:	87 e1       	ldi	r24, 0x17	; 23
     c70:	9c eb       	ldi	r25, 0xBC	; 188
     c72:	0e 94 00 09 	call	0x1200	; 0x1200 <__mulsi3>
     c76:	a7 01       	movw	r20, r14
     c78:	96 01       	movw	r18, r12
     c7a:	26 1b       	sub	r18, r22
     c7c:	37 0b       	sbc	r19, r23
     c7e:	48 0b       	sbc	r20, r24
     c80:	59 0b       	sbc	r21, r25
     c82:	ca 01       	movw	r24, r20
     c84:	b9 01       	movw	r22, r18
     c86:	20 e8       	ldi	r18, 0x80	; 128
     c88:	3f e1       	ldi	r19, 0x1F	; 31
     c8a:	46 e8       	ldi	r20, 0x86	; 134
     c8c:	57 e0       	ldi	r21, 0x07	; 7
     c8e:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodsi4>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	a2 0e       	add	r10, r18
     c9c:	b3 1e       	adc	r11, r19
     c9e:	20 e8       	ldi	r18, 0x80	; 128
     ca0:	33 e3       	ldi	r19, 0x33	; 51
     ca2:	41 ee       	ldi	r20, 0xE1	; 225
     ca4:	51 e0       	ldi	r21, 0x01	; 1
     ca6:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodsi4>
     caa:	75 01       	movw	r14, r10
     cac:	e2 0e       	add	r14, r18
     cae:	f3 1e       	adc	r15, r19
     cb0:	20 e8       	ldi	r18, 0x80	; 128
     cb2:	31 e5       	ldi	r19, 0x51	; 81
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodsi4>
     cbc:	4b 01       	movw	r8, r22
     cbe:	5c 01       	movw	r10, r24
     cc0:	3a 83       	std	Y+2, r19	; 0x02
     cc2:	29 83       	std	Y+1, r18	; 0x01
     cc4:	be 01       	movw	r22, r28
     cc6:	6f 5f       	subi	r22, 0xFF	; 255
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	c7 01       	movw	r24, r14
     ccc:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_month>
     cd0:	d8 2e       	mov	r13, r24
     cd2:	c5 01       	movw	r24, r10
     cd4:	b4 01       	movw	r22, r8
     cd6:	20 e1       	ldi	r18, 0x10	; 16
     cd8:	3e e0       	ldi	r19, 0x0E	; 14
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodsi4>
     ce2:	29 01       	movw	r4, r18
     ce4:	3a 01       	movw	r6, r20
     ce6:	4b 01       	movw	r8, r22
     ce8:	5c 01       	movw	r10, r24
     cea:	63 e6       	ldi	r22, 0x63	; 99
     cec:	71 e0       	ldi	r23, 0x01	; 1
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <str_cpy>
     cf6:	6d 2d       	mov	r22, r13
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	42 e0       	ldi	r20, 0x02	; 2
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <str_writeudec16>
     d08:	69 81       	ldd	r22, Y+1	; 0x01
     d0a:	7a 81       	ldd	r23, Y+2	; 0x02
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	42 e0       	ldi	r20, 0x02	; 2
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <str_writeudec16>
     d1a:	44 e0       	ldi	r20, 0x04	; 4
     d1c:	b7 01       	movw	r22, r14
     d1e:	86 e0       	ldi	r24, 0x06	; 6
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <str_writeudec16>
     d26:	42 e0       	ldi	r20, 0x02	; 2
     d28:	b2 01       	movw	r22, r4
     d2a:	8b e0       	ldi	r24, 0x0B	; 11
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <str_writeudec16>
     d32:	c5 01       	movw	r24, r10
     d34:	b4 01       	movw	r22, r8
     d36:	2c e3       	ldi	r18, 0x3C	; 60
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodsi4>
     d42:	49 01       	movw	r8, r18
     d44:	5a 01       	movw	r10, r20
     d46:	6b 01       	movw	r12, r22
     d48:	7c 01       	movw	r14, r24
     d4a:	42 e0       	ldi	r20, 0x02	; 2
     d4c:	b4 01       	movw	r22, r8
     d4e:	8e e0       	ldi	r24, 0x0E	; 14
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <str_writeudec16>
     d56:	42 e0       	ldi	r20, 0x02	; 2
     d58:	b6 01       	movw	r22, r12
     d5a:	81 e1       	ldi	r24, 0x11	; 17
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <str_writeudec16>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	7f 90       	pop	r7
     d80:	6f 90       	pop	r6
     d82:	5f 90       	pop	r5
     d84:	4f 90       	pop	r4
     d86:	08 95       	ret

00000d88 <rtc_get_date_string>:
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	0e 94 98 03 	call	0x730	; 0x730 <timer1_get>
     d90:	00 91 8f 01 	lds	r16, 0x018F	; 0x80018f <rtc_base>
     d94:	10 91 90 01 	lds	r17, 0x0190	; 0x800190 <rtc_base+0x1>
     d98:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <rtc_base+0x2>
     d9c:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <rtc_base+0x3>
     da0:	60 0f       	add	r22, r16
     da2:	71 1f       	adc	r23, r17
     da4:	82 1f       	adc	r24, r18
     da6:	93 1f       	adc	r25, r19
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <rtc_num2datestr>

00000db0 <str_cpy>:
     db0:	fc 01       	movw	r30, r24
     db2:	db 01       	movw	r26, r22
     db4:	8d 91       	ld	r24, X+
     db6:	bd 01       	movw	r22, r26
     db8:	88 23       	and	r24, r24
     dba:	11 f0       	breq	.+4      	; 0xdc0 <str_cpy+0x10>
     dbc:	81 93       	st	Z+, r24
     dbe:	f9 cf       	rjmp	.-14     	; 0xdb2 <str_cpy+0x2>
     dc0:	10 82       	st	Z, r1
     dc2:	08 95       	ret

00000dc4 <str_writeudec16>:
     dc4:	9f 92       	push	r9
     dc6:	af 92       	push	r10
     dc8:	bf 92       	push	r11
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	00 d0       	rcall	.+0      	; 0xddc <str_writeudec16+0x18>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <str_writeudec16+0x1a>
     dde:	1f 92       	push	r1
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	fc 01       	movw	r30, r24
     de6:	6b 01       	movw	r12, r22
     de8:	9e 01       	movw	r18, r28
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
     dee:	8e 01       	movw	r16, r28
     df0:	0a 5f       	subi	r16, 0xFA	; 250
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
     df4:	ee 24       	eor	r14, r14
     df6:	e3 94       	inc	r14
     df8:	f1 2c       	mov	r15, r1
     dfa:	9a e0       	ldi	r25, 0x0A	; 10
     dfc:	99 2e       	mov	r9, r25
     dfe:	9e 9c       	mul	r9, r14
     e00:	50 01       	movw	r10, r0
     e02:	9f 9c       	mul	r9, r15
     e04:	b0 0c       	add	r11, r0
     e06:	11 24       	eor	r1, r1
     e08:	c6 01       	movw	r24, r12
     e0a:	b5 01       	movw	r22, r10
     e0c:	0e 94 10 09 	call	0x1220	; 0x1220 <__udivmodhi4>
     e10:	b7 01       	movw	r22, r14
     e12:	0e 94 10 09 	call	0x1220	; 0x1220 <__udivmodhi4>
     e16:	d9 01       	movw	r26, r18
     e18:	6d 93       	st	X+, r22
     e1a:	9d 01       	movw	r18, r26
     e1c:	c6 1a       	sub	r12, r22
     e1e:	d1 08       	sbc	r13, r1
     e20:	67 fd       	sbrc	r22, 7
     e22:	d3 94       	inc	r13
     e24:	75 01       	movw	r14, r10
     e26:	a0 17       	cp	r26, r16
     e28:	b1 07       	cpc	r27, r17
     e2a:	49 f7       	brne	.-46     	; 0xdfe <str_writeudec16+0x3a>
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	d8 01       	movw	r26, r16
     e38:	2e 91       	ld	r18, -X
     e3a:	8d 01       	movw	r16, r26
     e3c:	21 11       	cpse	r18, r1
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <str_writeudec16+0x86>
     e40:	61 15       	cp	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <str_writeudec16+0x86>
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	41 f4       	brne	.+16     	; 0xe5a <str_writeudec16+0x96>
     e4a:	84 17       	cp	r24, r20
     e4c:	95 07       	cpc	r25, r21
     e4e:	2c f4       	brge	.+10     	; 0xe5a <str_writeudec16+0x96>
     e50:	20 5d       	subi	r18, 0xD0	; 208
     e52:	21 93       	st	Z+, r18
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <str_writeudec16+0x9e>
     e5a:	84 17       	cp	r24, r20
     e5c:	95 07       	cpc	r25, r21
     e5e:	0c f4       	brge	.+2      	; 0xe62 <str_writeudec16+0x9e>
     e60:	31 96       	adiw	r30, 0x01	; 1
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	40 f7       	brcc	.-48     	; 0xe36 <str_writeudec16+0x72>
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	9f 90       	pop	r9
     e86:	08 95       	ret

00000e88 <uart_init>:
     e88:	0e 94 0e 08 	call	0x101c	; 0x101c <serial_init>
     e8c:	78 94       	sei
     e8e:	08 95       	ret

00000e90 <uart_writechar>:
     e90:	0c 94 a6 08 	jmp	0x114c	; 0x114c <serial_writechar>

00000e94 <uart_writestr>:
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
     e9a:	89 91       	ld	r24, Y+
     e9c:	88 23       	and	r24, r24
     e9e:	19 f0       	breq	.+6      	; 0xea6 <uart_writestr+0x12>
     ea0:	0e 94 a6 08 	call	0x114c	; 0x114c <serial_writechar>
     ea4:	fa cf       	rjmp	.-12     	; 0xe9a <uart_writestr+0x6>
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <uart_writehex8>:
     eac:	cf 93       	push	r28
     eae:	c8 2f       	mov	r28, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	24 e0       	ldi	r18, 0x04	; 4
     eb4:	95 95       	asr	r25
     eb6:	87 95       	ror	r24
     eb8:	2a 95       	dec	r18
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <uart_writehex8+0x8>
     ebc:	8a 30       	cpi	r24, 0x0A	; 10
     ebe:	10 f4       	brcc	.+4      	; 0xec4 <uart_writehex8+0x18>
     ec0:	80 5d       	subi	r24, 0xD0	; 208
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <uart_writehex8+0x1a>
     ec4:	89 5c       	subi	r24, 0xC9	; 201
     ec6:	0e 94 a6 08 	call	0x114c	; 0x114c <serial_writechar>
     eca:	8c 2f       	mov	r24, r28
     ecc:	8f 70       	andi	r24, 0x0F	; 15
     ece:	8a 30       	cpi	r24, 0x0A	; 10
     ed0:	10 f0       	brcs	.+4      	; 0xed6 <uart_writehex8+0x2a>
     ed2:	89 5c       	subi	r24, 0xC9	; 201
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <uart_writehex8+0x2c>
     ed6:	80 5d       	subi	r24, 0xD0	; 208
     ed8:	cf 91       	pop	r28
     eda:	0c 94 a6 08 	jmp	0x114c	; 0x114c <serial_writechar>

00000ede <uart_writehex16>:
     ede:	cf 93       	push	r28
     ee0:	c8 2f       	mov	r28, r24
     ee2:	89 2f       	mov	r24, r25
     ee4:	0e 94 56 07 	call	0xeac	; 0xeac <uart_writehex8>
     ee8:	8c 2f       	mov	r24, r28
     eea:	cf 91       	pop	r28
     eec:	0c 94 56 07 	jmp	0xeac	; 0xeac <uart_writehex8>

00000ef0 <uart_writedec32>:
     ef0:	2f 92       	push	r2
     ef2:	3f 92       	push	r3
     ef4:	4f 92       	push	r4
     ef6:	5f 92       	push	r5
     ef8:	6f 92       	push	r6
     efa:	7f 92       	push	r7
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	63 97       	sbiw	r28, 0x13	; 19
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	6b 01       	movw	r12, r22
     f26:	7c 01       	movw	r14, r24
     f28:	97 ff       	sbrs	r25, 7
     f2a:	0d c0       	rjmp	.+26     	; 0xf46 <uart_writedec32+0x56>
     f2c:	f0 94       	com	r15
     f2e:	e0 94       	com	r14
     f30:	d0 94       	com	r13
     f32:	c0 94       	com	r12
     f34:	c1 1c       	adc	r12, r1
     f36:	d1 1c       	adc	r13, r1
     f38:	e1 1c       	adc	r14, r1
     f3a:	f1 1c       	adc	r15, r1
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9b 8b       	std	Y+19, r25	; 0x13
     f42:	8a 8b       	std	Y+18, r24	; 0x12
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <uart_writedec32+0x5a>
     f46:	1b 8a       	std	Y+19, r1	; 0x13
     f48:	1a 8a       	std	Y+18, r1	; 0x12
     f4a:	fe 01       	movw	r30, r28
     f4c:	31 96       	adiw	r30, 0x01	; 1
     f4e:	5f 01       	movw	r10, r30
     f50:	8e 01       	movw	r16, r28
     f52:	05 5f       	subi	r16, 0xF5	; 245
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	f9 8b       	std	Y+17, r31	; 0x11
     f58:	e8 8b       	std	Y+16, r30	; 0x10
     f5a:	66 24       	eor	r6, r6
     f5c:	63 94       	inc	r6
     f5e:	71 2c       	mov	r7, r1
     f60:	81 2c       	mov	r8, r1
     f62:	91 2c       	mov	r9, r1
     f64:	aa e0       	ldi	r26, 0x0A	; 10
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	93 01       	movw	r18, r6
     f6a:	a4 01       	movw	r20, r8
     f6c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__muluhisi3>
     f70:	1b 01       	movw	r2, r22
     f72:	2c 01       	movw	r4, r24
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	91 01       	movw	r18, r2
     f7a:	a2 01       	movw	r20, r4
     f7c:	0e 94 46 09 	call	0x128c	; 0x128c <__divmodsi4>
     f80:	93 01       	movw	r18, r6
     f82:	a4 01       	movw	r20, r8
     f84:	0e 94 46 09 	call	0x128c	; 0x128c <__divmodsi4>
     f88:	e8 89       	ldd	r30, Y+16	; 0x10
     f8a:	f9 89       	ldd	r31, Y+17	; 0x11
     f8c:	21 93       	st	Z+, r18
     f8e:	f9 8b       	std	Y+17, r31	; 0x11
     f90:	e8 8b       	std	Y+16, r30	; 0x10
     f92:	82 2f       	mov	r24, r18
     f94:	22 0f       	add	r18, r18
     f96:	99 0b       	sbc	r25, r25
     f98:	aa 0b       	sbc	r26, r26
     f9a:	bb 0b       	sbc	r27, r27
     f9c:	c8 1a       	sub	r12, r24
     f9e:	d9 0a       	sbc	r13, r25
     fa0:	ea 0a       	sbc	r14, r26
     fa2:	fb 0a       	sbc	r15, r27
     fa4:	31 01       	movw	r6, r2
     fa6:	42 01       	movw	r8, r4
     fa8:	0e 17       	cp	r16, r30
     faa:	1f 07       	cpc	r17, r31
     fac:	d9 f6       	brne	.-74     	; 0xf64 <uart_writedec32+0x74>
     fae:	8a 89       	ldd	r24, Y+18	; 0x12
     fb0:	9b 89       	ldd	r25, Y+19	; 0x13
     fb2:	89 2b       	or	r24, r25
     fb4:	11 f0       	breq	.+4      	; 0xfba <uart_writedec32+0xca>
     fb6:	8d e2       	ldi	r24, 0x2D	; 45
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <uart_writedec32+0xcc>
     fba:	80 e2       	ldi	r24, 0x20	; 32
     fbc:	0e 94 a6 08 	call	0x114c	; 0x114c <serial_writechar>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	f8 01       	movw	r30, r16
     fc6:	82 91       	ld	r24, -Z
     fc8:	8f 01       	movw	r16, r30
     fca:	81 11       	cpse	r24, r1
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <uart_writedec32+0xea>
     fce:	21 15       	cp	r18, r1
     fd0:	31 05       	cpc	r19, r1
     fd2:	19 f4       	brne	.+6      	; 0xfda <uart_writedec32+0xea>
     fd4:	ea 15       	cp	r30, r10
     fd6:	fb 05       	cpc	r31, r11
     fd8:	29 f4       	brne	.+10     	; 0xfe4 <uart_writedec32+0xf4>
     fda:	80 5d       	subi	r24, 0xD0	; 208
     fdc:	0e 94 a6 08 	call	0x114c	; 0x114c <serial_writechar>
     fe0:	21 e0       	ldi	r18, 0x01	; 1
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	0a 15       	cp	r16, r10
     fe6:	1b 05       	cpc	r17, r11
     fe8:	69 f7       	brne	.-38     	; 0xfc4 <uart_writedec32+0xd4>
     fea:	63 96       	adiw	r28, 0x13	; 19
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	9f 90       	pop	r9
    100c:	8f 90       	pop	r8
    100e:	7f 90       	pop	r7
    1010:	6f 90       	pop	r6
    1012:	5f 90       	pop	r5
    1014:	4f 90       	pop	r4
    1016:	3f 90       	pop	r3
    1018:	2f 90       	pop	r2
    101a:	08 95       	ret

0000101c <serial_init>:
    101c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1020:	87 e6       	ldi	r24, 0x67	; 103
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1028:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    102c:	e1 ec       	ldi	r30, 0xC1	; 193
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	88 e1       	ldi	r24, 0x18	; 24
    1032:	80 83       	st	Z, r24
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    103a:	80 81       	ld	r24, Z
    103c:	80 6a       	ori	r24, 0xA0	; 160
    103e:	80 83       	st	Z, r24
    1040:	08 95       	ret

00001042 <__vector_18>:
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    1056:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <rxtail>
    105a:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <rxhead>
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	82 1b       	sub	r24, r18
    1062:	91 09       	sbc	r25, r1
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	8f 73       	andi	r24, 0x3F	; 63
    1068:	99 27       	eor	r25, r25
    106a:	89 2b       	or	r24, r25
    106c:	79 f0       	breq	.+30     	; 0x108c <__vector_18+0x4a>
    106e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <rxhead>
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1078:	ed 56       	subi	r30, 0x6D	; 109
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	80 83       	st	Z, r24
    107e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <rxhead>
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	8f 73       	andi	r24, 0x3F	; 63
    1086:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rxhead>
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <__vector_18+0x4e>
    108c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1090:	ff 91       	pop	r31
    1092:	ef 91       	pop	r30
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <__vector_19>:
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	2f 93       	push	r18
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
    10b8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <txhead>
    10bc:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <txtail>
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	82 1b       	sub	r24, r18
    10c4:	91 09       	sbc	r25, r1
    10c6:	8f 73       	andi	r24, 0x3F	; 63
    10c8:	99 27       	eor	r25, r25
    10ca:	89 2b       	or	r24, r25
    10cc:	79 f0       	breq	.+30     	; 0x10ec <__vector_19+0x48>
    10ce:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <txtail>
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	ed 52       	subi	r30, 0x2D	; 45
    10d6:	fe 4f       	sbci	r31, 0xFE	; 254
    10d8:	80 81       	ld	r24, Z
    10da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    10de:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <txtail>
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	8f 73       	andi	r24, 0x3F	; 63
    10e6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <txtail>
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <__vector_19+0x52>
    10ec:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10f0:	8f 7d       	andi	r24, 0xDF	; 223
    10f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10f6:	ff 91       	pop	r31
    10f8:	ef 91       	pop	r30
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <serial_rxchars>:
    110a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <rxhead>
    110e:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <rxtail>
    1112:	89 1b       	sub	r24, r25
    1114:	8f 73       	andi	r24, 0x3F	; 63
    1116:	08 95       	ret

00001118 <serial_popchar>:
    1118:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <rxhead>
    111c:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <rxtail>
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	82 1b       	sub	r24, r18
    1124:	91 09       	sbc	r25, r1
    1126:	8f 73       	andi	r24, 0x3F	; 63
    1128:	99 27       	eor	r25, r25
    112a:	89 2b       	or	r24, r25
    112c:	69 f0       	breq	.+26     	; 0x1148 <serial_popchar+0x30>
    112e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <rxtail>
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	ed 56       	subi	r30, 0x6D	; 109
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	80 81       	ld	r24, Z
    113a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <rxtail>
    113e:	9f 5f       	subi	r25, 0xFF	; 255
    1140:	9f 73       	andi	r25, 0x3F	; 63
    1142:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <rxtail>
    1146:	08 95       	ret
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret

0000114c <serial_writechar>:
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	07 fe       	sbrs	r0, 7
    1150:	0e c0       	rjmp	.+28     	; 0x116e <serial_writechar+0x22>
    1152:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <txtail>
    1156:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <txhead>
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	29 1b       	sub	r18, r25
    115e:	31 09       	sbc	r19, r1
    1160:	21 50       	subi	r18, 0x01	; 1
    1162:	31 09       	sbc	r19, r1
    1164:	2f 73       	andi	r18, 0x3F	; 63
    1166:	33 27       	eor	r19, r19
    1168:	23 2b       	or	r18, r19
    116a:	99 f3       	breq	.-26     	; 0x1152 <serial_writechar+0x6>
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <serial_writechar+0x3c>
    116e:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <txtail>
    1172:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <txhead>
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	29 1b       	sub	r18, r25
    117a:	31 09       	sbc	r19, r1
    117c:	21 50       	subi	r18, 0x01	; 1
    117e:	31 09       	sbc	r19, r1
    1180:	2f 73       	andi	r18, 0x3F	; 63
    1182:	33 27       	eor	r19, r19
    1184:	23 2b       	or	r18, r19
    1186:	61 f0       	breq	.+24     	; 0x11a0 <serial_writechar+0x54>
    1188:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <txhead>
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	ed 52       	subi	r30, 0x2D	; 45
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	80 83       	st	Z, r24
    1194:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <txhead>
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	8f 73       	andi	r24, 0x3F	; 63
    119c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <txhead>
    11a0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11a4:	80 62       	ori	r24, 0x20	; 32
    11a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11aa:	08 95       	ret

000011ac <serial_writestr>:
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	ec 01       	movw	r28, r24
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	11 e0       	ldi	r17, 0x01	; 1
    11b8:	18 0f       	add	r17, r24
    11ba:	fe 01       	movw	r30, r28
    11bc:	e8 0f       	add	r30, r24
    11be:	f1 1d       	adc	r31, r1
    11c0:	80 81       	ld	r24, Z
    11c2:	88 23       	and	r24, r24
    11c4:	21 f0       	breq	.+8      	; 0x11ce <serial_writestr+0x22>
    11c6:	0e 94 a6 08 	call	0x114c	; 0x114c <serial_writechar>
    11ca:	81 2f       	mov	r24, r17
    11cc:	f4 cf       	rjmp	.-24     	; 0x11b6 <serial_writestr+0xa>
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	08 95       	ret

000011d6 <serial_writestr_P>:
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	11 e0       	ldi	r17, 0x01	; 1
    11e2:	18 0f       	add	r17, r24
    11e4:	fe 01       	movw	r30, r28
    11e6:	e8 0f       	add	r30, r24
    11e8:	f1 1d       	adc	r31, r1
    11ea:	84 91       	lpm	r24, Z
    11ec:	88 23       	and	r24, r24
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <serial_writestr_P+0x22>
    11f0:	0e 94 a6 08 	call	0x114c	; 0x114c <serial_writechar>
    11f4:	81 2f       	mov	r24, r17
    11f6:	f4 cf       	rjmp	.-24     	; 0x11e0 <serial_writestr_P+0xa>
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	08 95       	ret

00001200 <__mulsi3>:
    1200:	db 01       	movw	r26, r22
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__muluhisi3>
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	a2 9f       	mul	r26, r18
    1210:	80 0d       	add	r24, r0
    1212:	91 1d       	adc	r25, r1
    1214:	a3 9f       	mul	r26, r19
    1216:	90 0d       	add	r25, r0
    1218:	b2 9f       	mul	r27, r18
    121a:	90 0d       	add	r25, r0
    121c:	11 24       	eor	r1, r1
    121e:	08 95       	ret

00001220 <__udivmodhi4>:
    1220:	aa 1b       	sub	r26, r26
    1222:	bb 1b       	sub	r27, r27
    1224:	51 e1       	ldi	r21, 0x11	; 17
    1226:	07 c0       	rjmp	.+14     	; 0x1236 <__udivmodhi4_ep>

00001228 <__udivmodhi4_loop>:
    1228:	aa 1f       	adc	r26, r26
    122a:	bb 1f       	adc	r27, r27
    122c:	a6 17       	cp	r26, r22
    122e:	b7 07       	cpc	r27, r23
    1230:	10 f0       	brcs	.+4      	; 0x1236 <__udivmodhi4_ep>
    1232:	a6 1b       	sub	r26, r22
    1234:	b7 0b       	sbc	r27, r23

00001236 <__udivmodhi4_ep>:
    1236:	88 1f       	adc	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	5a 95       	dec	r21
    123c:	a9 f7       	brne	.-22     	; 0x1228 <__udivmodhi4_loop>
    123e:	80 95       	com	r24
    1240:	90 95       	com	r25
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	08 95       	ret

00001248 <__udivmodsi4>:
    1248:	a1 e2       	ldi	r26, 0x21	; 33
    124a:	1a 2e       	mov	r1, r26
    124c:	aa 1b       	sub	r26, r26
    124e:	bb 1b       	sub	r27, r27
    1250:	fd 01       	movw	r30, r26
    1252:	0d c0       	rjmp	.+26     	; 0x126e <__udivmodsi4_ep>

00001254 <__udivmodsi4_loop>:
    1254:	aa 1f       	adc	r26, r26
    1256:	bb 1f       	adc	r27, r27
    1258:	ee 1f       	adc	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	a2 17       	cp	r26, r18
    125e:	b3 07       	cpc	r27, r19
    1260:	e4 07       	cpc	r30, r20
    1262:	f5 07       	cpc	r31, r21
    1264:	20 f0       	brcs	.+8      	; 0x126e <__udivmodsi4_ep>
    1266:	a2 1b       	sub	r26, r18
    1268:	b3 0b       	sbc	r27, r19
    126a:	e4 0b       	sbc	r30, r20
    126c:	f5 0b       	sbc	r31, r21

0000126e <__udivmodsi4_ep>:
    126e:	66 1f       	adc	r22, r22
    1270:	77 1f       	adc	r23, r23
    1272:	88 1f       	adc	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	1a 94       	dec	r1
    1278:	69 f7       	brne	.-38     	; 0x1254 <__udivmodsi4_loop>
    127a:	60 95       	com	r22
    127c:	70 95       	com	r23
    127e:	80 95       	com	r24
    1280:	90 95       	com	r25
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	bd 01       	movw	r22, r26
    1288:	cf 01       	movw	r24, r30
    128a:	08 95       	ret

0000128c <__divmodsi4>:
    128c:	05 2e       	mov	r0, r21
    128e:	97 fb       	bst	r25, 7
    1290:	1e f4       	brtc	.+6      	; 0x1298 <__divmodsi4+0xc>
    1292:	00 94       	com	r0
    1294:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__negsi2>
    1298:	57 fd       	sbrc	r21, 7
    129a:	07 d0       	rcall	.+14     	; 0x12aa <__divmodsi4_neg2>
    129c:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodsi4>
    12a0:	07 fc       	sbrc	r0, 7
    12a2:	03 d0       	rcall	.+6      	; 0x12aa <__divmodsi4_neg2>
    12a4:	4e f4       	brtc	.+18     	; 0x12b8 <__divmodsi4_exit>
    12a6:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__negsi2>

000012aa <__divmodsi4_neg2>:
    12aa:	50 95       	com	r21
    12ac:	40 95       	com	r20
    12ae:	30 95       	com	r19
    12b0:	21 95       	neg	r18
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	4f 4f       	sbci	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255

000012b8 <__divmodsi4_exit>:
    12b8:	08 95       	ret

000012ba <__negsi2>:
    12ba:	90 95       	com	r25
    12bc:	80 95       	com	r24
    12be:	70 95       	com	r23
    12c0:	61 95       	neg	r22
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 4f       	sbci	r24, 0xFF	; 255
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	08 95       	ret

000012ca <__umulhisi3>:
    12ca:	a2 9f       	mul	r26, r18
    12cc:	b0 01       	movw	r22, r0
    12ce:	b3 9f       	mul	r27, r19
    12d0:	c0 01       	movw	r24, r0
    12d2:	a3 9f       	mul	r26, r19
    12d4:	70 0d       	add	r23, r0
    12d6:	81 1d       	adc	r24, r1
    12d8:	11 24       	eor	r1, r1
    12da:	91 1d       	adc	r25, r1
    12dc:	b2 9f       	mul	r27, r18
    12de:	70 0d       	add	r23, r0
    12e0:	81 1d       	adc	r24, r1
    12e2:	11 24       	eor	r1, r1
    12e4:	91 1d       	adc	r25, r1
    12e6:	08 95       	ret

000012e8 <__muluhisi3>:
    12e8:	0e 94 65 09 	call	0x12ca	; 0x12ca <__umulhisi3>
    12ec:	a5 9f       	mul	r26, r21
    12ee:	90 0d       	add	r25, r0
    12f0:	b4 9f       	mul	r27, r20
    12f2:	90 0d       	add	r25, r0
    12f4:	a4 9f       	mul	r26, r20
    12f6:	80 0d       	add	r24, r0
    12f8:	91 1d       	adc	r25, r1
    12fa:	11 24       	eor	r1, r1
    12fc:	08 95       	ret

000012fe <_exit>:
    12fe:	f8 94       	cli

00001300 <__stop_program>:
    1300:	ff cf       	rjmp	.-2      	; 0x1300 <__stop_program>
