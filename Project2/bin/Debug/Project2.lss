
bin/Debug/Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00001ad2  00001b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00001aaa  00001aaa  00001b3e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001ad  008001c4  008001c4  00001c2a  2**0
                  ALLOC
  4 .stab         00001ac4  00000000  00000000  00001c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000eec  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045f0  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00004630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00004c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000051c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_18>
      4c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ed       	ldi	r30, 0xD2	; 210
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3c       	cpi	r26, 0xC4	; 196
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a4 ec       	ldi	r26, 0xC4	; 196
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 37       	cpi	r26, 0x71	; 113
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
      9e:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_is_data_valid>:
changes:

NOTE:

*/
 static unsigned int config_is_data_valid(){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <config_is_data_valid+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
     // check if token = ASU
     int result = 1;
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	9a 83       	std	Y+2, r25	; 0x02
      b6:	89 83       	std	Y+1, r24	; 0x01

     if(config.token[0] != 'A' || config.token[1] != 'S' || config.token[2] != 'U' || config.token[3] != '\0'){
      b8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
      bc:	81 34       	cpi	r24, 0x41	; 65
      be:	61 f4       	brne	.+24     	; 0xd8 <config_is_data_valid+0x32>
      c0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <__data_end+0x1>
      c4:	83 35       	cpi	r24, 0x53	; 83
      c6:	41 f4       	brne	.+16     	; 0xd8 <config_is_data_valid+0x32>
      c8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end+0x2>
      cc:	85 35       	cpi	r24, 0x55	; 85
      ce:	21 f4       	brne	.+8      	; 0xd8 <config_is_data_valid+0x32>
      d0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <__data_end+0x3>
      d4:	88 23       	and	r24, r24
      d6:	11 f0       	breq	.+4      	; 0xdc <config_is_data_valid+0x36>
        result = 0;
      d8:	1a 82       	std	Y+2, r1	; 0x02
      da:	19 82       	std	Y+1, r1	; 0x01
     }

     if(is_checksum_valid((unsigned char*)&config,sizeof(config)) == 0){
      dc:	62 e1       	ldi	r22, 0x12	; 18
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	84 ec       	ldi	r24, 0xC4	; 196
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <is_checksum_valid>
      e8:	89 2b       	or	r24, r25
      ea:	11 f4       	brne	.+4      	; 0xf0 <config_is_data_valid+0x4a>
        result = 0;
      ec:	1a 82       	std	Y+2, r1	; 0x02
      ee:	19 82       	std	Y+1, r1	; 0x01
     }

     return result;
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	9a 81       	ldd	r25, Y+2	; 0x02
 }
      f4:	0f 90       	pop	r0
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <config_write_defaults>:
    Config data in eeprom is updated

NOTE:

*/
 static void config_write_defaults(){
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
     update_checksum((unsigned char*)&defaults, sizeof(defaults));
     106:	62 e1       	ldi	r22, 0x12	; 18
     108:	70 e0       	ldi	r23, 0x00	; 0
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 b3 02 	call	0x566	; 0x566 <update_checksum>
     eeprom_writebuf(CONFIG_EEPROM_ADDRESS, (unsigned char*)&defaults, sizeof(defaults));
     112:	42 e1       	ldi	r20, 0x12	; 18
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	71 e0       	ldi	r23, 0x01	; 1
     118:	80 e4       	ldi	r24, 0x40	; 64
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 aa 01 	call	0x354	; 0x354 <eeprom_writebuf>
 }
     120:	00 00       	nop
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <config_init>:
    If config data in eeprom is not valid, the config eeprom data is updated

NOTE:

*/
void config_init(){
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
    // block wait if eeprom is busy
    while(eeprom_isbusy());
     130:	00 00       	nop
     132:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     136:	89 2b       	or	r24, r25
     138:	e1 f7       	brne	.-8      	; 0x132 <config_init+0xa>

    // initialize config with data from eeprom
    eeprom_readbuf(CONFIG_EEPROM_ADDRESS, (unsigned char*)&config, sizeof(config_struct));
     13a:	42 e1       	ldi	r20, 0x12	; 18
     13c:	64 ec       	ldi	r22, 0xC4	; 196
     13e:	71 e0       	ldi	r23, 0x01	; 1
     140:	80 e4       	ldi	r24, 0x40	; 64
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <eeprom_readbuf>

    //check if data is valid, if it is valid we are done here
    if(config_is_data_valid() > 0){
     148:	0e 94 53 00 	call	0xa6	; 0xa6 <config_is_data_valid>
     14c:	89 2b       	or	r24, r25
     14e:	91 f4       	brne	.+36     	; 0x174 <config_init+0x4c>
        return;
    }

    // if config data not valid, set to defaults
    update_checksum((unsigned char*)&defaults, sizeof(defaults));
     150:	62 e1       	ldi	r22, 0x12	; 18
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 b3 02 	call	0x566	; 0x566 <update_checksum>
    config_write_defaults();
     15c:	0e 94 7f 00 	call	0xfe	; 0xfe <config_write_defaults>

    // pull data from eeprom again into config
    eeprom_readbuf(CONFIG_EEPROM_ADDRESS, (unsigned char*)&config, sizeof(config_struct));
     160:	42 e1       	ldi	r20, 0x12	; 18
     162:	64 ec       	ldi	r22, 0xC4	; 196
     164:	71 e0       	ldi	r23, 0x01	; 1
     166:	80 e4       	ldi	r24, 0x40	; 64
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <eeprom_readbuf>


    // clear the modified flag
    modified = 0;
     16e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <modified>
     172:	01 c0       	rjmp	.+2      	; 0x176 <config_init+0x4e>
    // initialize config with data from eeprom
    eeprom_readbuf(CONFIG_EEPROM_ADDRESS, (unsigned char*)&config, sizeof(config_struct));

    //check if data is valid, if it is valid we are done here
    if(config_is_data_valid() > 0){
        return;
     174:	00 00       	nop


    // clear the modified flag
    modified = 0;

}
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <config_update>:
    If config struct has been updated, the config eeprom data is updated

NOTE:

*/
void config_update(){
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
    // if eeprom is busy, return
    if(eeprom_isbusy() > 0){
     184:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     188:	18 16       	cp	r1, r24
     18a:	19 06       	cpc	r1, r25
     18c:	a4 f0       	brlt	.+40     	; 0x1b6 <config_update+0x3a>
        return;
    }

    // if config data is not modified return
    if(! modified){
     18e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <modified>
     192:	88 23       	and	r24, r24
     194:	91 f0       	breq	.+36     	; 0x1ba <config_update+0x3e>
        return;
    }

    // Update the config data with what is in the config struct

    update_checksum((unsigned char*)&config, sizeof(config));
     196:	62 e1       	ldi	r22, 0x12	; 18
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	84 ec       	ldi	r24, 0xC4	; 196
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 b3 02 	call	0x566	; 0x566 <update_checksum>
    eeprom_writebuf(CONFIG_EEPROM_ADDRESS, (unsigned char*)&config, sizeof(config));
     1a2:	42 e1       	ldi	r20, 0x12	; 18
     1a4:	64 ec       	ldi	r22, 0xC4	; 196
     1a6:	71 e0       	ldi	r23, 0x01	; 1
     1a8:	80 e4       	ldi	r24, 0x40	; 64
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 aa 01 	call	0x354	; 0x354 <eeprom_writebuf>

    // clear the modified flag
    modified = 0;
     1b0:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <modified>
     1b4:	03 c0       	rjmp	.+6      	; 0x1bc <config_update+0x40>

*/
void config_update(){
    // if eeprom is busy, return
    if(eeprom_isbusy() > 0){
        return;
     1b6:	00 00       	nop
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <config_update+0x40>
    }

    // if config data is not modified return
    if(! modified){
        return;
     1ba:	00 00       	nop
    eeprom_writebuf(CONFIG_EEPROM_ADDRESS, (unsigned char*)&config, sizeof(config));

    // clear the modified flag
    modified = 0;

}
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <config_set_modified>:
changes:
    None
NOTE:

*/
void config_set_modified(){
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
    modified = 1;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <modified>
}
     1d0:	00 00       	nop
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <eeprom_unlock>:
* Changes ...
*/
static void eeprom_unlock()
{
    /* Write logical one to EEMPE */
    EECR |= (1<<EEMPE);
     1d8:	fa 9a       	sbi	0x1f, 2	; 31
    /* Start eeprom write by setting EEPE */
    EECR |= (1<<EEPE);
     1da:	f9 9a       	sbi	0x1f, 1	; 31
     1dc:	08 95       	ret

000001de <set_eear>:
#pragma GCC pop_options
/**
set_eear(unsigned int address)
private internal function used to set the HIGH and LOW registers for the EEAR
*/
static void set_eear(unsigned int address){
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <set_eear+0x6>
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	9a 83       	std	Y+2, r25	; 0x02
     1ea:	89 83       	std	Y+1, r24	; 0x01
    EEARH = address >> 8;
     1ec:	82 e4       	ldi	r24, 0x42	; 66
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	29 81       	ldd	r18, Y+1	; 0x01
     1f2:	3a 81       	ldd	r19, Y+2	; 0x02
     1f4:	23 2f       	mov	r18, r19
     1f6:	33 27       	eor	r19, r19
     1f8:	fc 01       	movw	r30, r24
     1fa:	20 83       	st	Z, r18
    EEARL = address & 0xFF;
     1fc:	81 e4       	ldi	r24, 0x41	; 65
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	29 81       	ldd	r18, Y+1	; 0x01
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
    return;
     206:	00 00       	nop
}
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <EEPROM_write>:


static void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	00 d0       	rcall	.+0      	; 0x218 <EEPROM_write+0x6>
     218:	00 d0       	rcall	.+0      	; 0x21a <EEPROM_write+0x8>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	9b 83       	std	Y+3, r25	; 0x03
     220:	8a 83       	std	Y+2, r24	; 0x02
     222:	6c 83       	std	Y+4, r22	; 0x04
    // get current global interrupt state
    unsigned char curInterruptState = SREG & 0x80;
     224:	8f e5       	ldi	r24, 0x5F	; 95
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	fc 01       	movw	r30, r24
     22a:	80 81       	ld	r24, Z
     22c:	80 78       	andi	r24, 0x80	; 128
     22e:	89 83       	std	Y+1, r24	; 0x01
    // disable interrupts
    __builtin_avr_cli();
     230:	f8 94       	cli

    /* Wait for completion of previous write */
    while(EECR & (1<<EEPE));
     232:	00 00       	nop
     234:	8f e3       	ldi	r24, 0x3F	; 63
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	08 2e       	mov	r0, r24
     23e:	00 0c       	add	r0, r0
     240:	99 0b       	sbc	r25, r25
     242:	82 70       	andi	r24, 0x02	; 2
     244:	99 27       	eor	r25, r25
     246:	89 2b       	or	r24, r25
     248:	a9 f7       	brne	.-22     	; 0x234 <EEPROM_write+0x22>
    /* Set up address and Data Registers */
    set_eear(uiAddress);
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	9b 81       	ldd	r25, Y+3	; 0x03
     24e:	0e 94 ef 00 	call	0x1de	; 0x1de <set_eear>
    EEDR = ucData;
     252:	80 e4       	ldi	r24, 0x40	; 64
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	2c 81       	ldd	r18, Y+4	; 0x04
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18

    // unlock and start eeprom write
    eeprom_unlock();
     25c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <eeprom_unlock>

    // restore global interrupt state
    SREG |= curInterruptState;
     260:	8f e5       	ldi	r24, 0x5F	; 95
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	2f e5       	ldi	r18, 0x5F	; 95
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	f9 01       	movw	r30, r18
     26a:	30 81       	ld	r19, Z
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	23 2b       	or	r18, r19
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

}
     274:	00 00       	nop
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <block_wait_on_write>:

static void block_wait_on_write(){
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
    while(eeprom_isbusy() > 0);
     28c:	00 00       	nop
     28e:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     292:	18 16       	cp	r1, r24
     294:	19 06       	cpc	r1, r25
     296:	dc f3       	brlt	.-10     	; 0x28e <block_wait_on_write+0xa>
}
     298:	00 00       	nop
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <__vector_22>:

void __vector_22(void) __attribute__ ((signal, used, externally_visible));
void __vector_22(void){
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
    if(bufidx < writesize){
     2cc:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <bufidx>
     2d0:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <writesize>
     2d4:	98 17       	cp	r25, r24
     2d6:	f0 f4       	brcc	.+60     	; 0x314 <__vector_22+0x74>
        // write next byte in write buffer to eeprom
        EEPROM_write(writeaddr, writebuf[bufidx]);
     2d8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bufidx>
     2dc:	88 2f       	mov	r24, r24
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	89 52       	subi	r24, 0x29	; 41
     2e2:	9e 4f       	sbci	r25, 0xFE	; 254
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 81       	ld	r18, Z
     2e8:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <writeaddr>
     2ec:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <writeaddr+0x1>
     2f0:	62 2f       	mov	r22, r18
     2f2:	0e 94 09 01 	call	0x212	; 0x212 <EEPROM_write>

        //increment writeaddr
        writeaddr++;
     2f6:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <writeaddr>
     2fa:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <writeaddr+0x1>
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <writeaddr+0x1>
     304:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <writeaddr>
        // increment buffer index
        bufidx++;
     308:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <bufidx>
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <bufidx>
        EECR &= ~(1<<EERIE);
        // set write_busy = 0
        write_busy = 0;
    }

}
     312:	0b c0       	rjmp	.+22     	; 0x32a <__vector_22+0x8a>
        bufidx++;
    }
    else{
        // Done writing buffer
        // Disable EEPROM interrupts
        EECR &= ~(1<<EERIE);
     314:	8f e3       	ldi	r24, 0x3F	; 63
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	2f e3       	ldi	r18, 0x3F	; 63
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	f9 01       	movw	r30, r18
     31e:	20 81       	ld	r18, Z
     320:	27 7f       	andi	r18, 0xF7	; 247
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
        // set write_busy = 0
        write_busy = 0;
     326:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <write_busy>
    }

}
     32a:	00 00       	nop
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	bf 91       	pop	r27
     336:	af 91       	pop	r26
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	7f 91       	pop	r23
     33e:	6f 91       	pop	r22
     340:	5f 91       	pop	r21
     342:	4f 91       	pop	r20
     344:	3f 91       	pop	r19
     346:	2f 91       	pop	r18
     348:	0f 90       	pop	r0
     34a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <eeprom_writebuf>:


NOTE:
    Do not call if a write is already in progress
*/
void eeprom_writebuf(unsigned int addr, unsigned char * buf, unsigned char size){
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	27 97       	sbiw	r28, 0x07	; 7
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	9c 83       	std	Y+4, r25	; 0x04
     36a:	8b 83       	std	Y+3, r24	; 0x03
     36c:	7e 83       	std	Y+6, r23	; 0x06
     36e:	6d 83       	std	Y+5, r22	; 0x05
     370:	4f 83       	std	Y+7, r20	; 0x07

    // block wait if a write is already in progress
    block_wait_on_write();
     372:	0e 94 42 01 	call	0x284	; 0x284 <block_wait_on_write>

    // set the write address
    writeaddr = addr;
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <writeaddr+0x1>
     37e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <writeaddr>

    // set write busy = 1
    write_busy = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <write_busy>

    // set buffer index = 0
    bufidx = 0;
     388:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <bufidx>

    //copy buffer passed in to the internal write buffer
    for (int i = 0; i < size; i++){
     38c:	1a 82       	std	Y+2, r1	; 0x02
     38e:	19 82       	std	Y+1, r1	; 0x01
     390:	13 c0       	rjmp	.+38     	; 0x3b8 <eeprom_writebuf+0x64>
        writebuf[i] = buf[i];
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	2d 81       	ldd	r18, Y+5	; 0x05
     398:	3e 81       	ldd	r19, Y+6	; 0x06
     39a:	82 0f       	add	r24, r18
     39c:	93 1f       	adc	r25, r19
     39e:	fc 01       	movw	r30, r24
     3a0:	20 81       	ld	r18, Z
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	9a 81       	ldd	r25, Y+2	; 0x02
     3a6:	89 52       	subi	r24, 0x29	; 41
     3a8:	9e 4f       	sbci	r25, 0xFE	; 254
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18

    // set buffer index = 0
    bufidx = 0;

    //copy buffer passed in to the internal write buffer
    for (int i = 0; i < size; i++){
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ba:	28 2f       	mov	r18, r24
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	82 17       	cp	r24, r18
     3c4:	93 07       	cpc	r25, r19
     3c6:	2c f3       	brlt	.-54     	; 0x392 <eeprom_writebuf+0x3e>
        writebuf[i] = buf[i];
    }

    // set the internal write size
    writesize = size;
     3c8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ca:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <writesize>

    // enable EEPROM ready interrupts which will call vector22
    EECR |= (1<<EERIE);
     3ce:	8f e3       	ldi	r24, 0x3F	; 63
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	2f e3       	ldi	r18, 0x3F	; 63
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	28 60       	ori	r18, 0x08	; 8
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18

}
     3e0:	00 00       	nop
     3e2:	27 96       	adiw	r28, 0x07	; 7
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <eeprom_readbuf>:


NOTE:

*/
void eeprom_readbuf(unsigned int addr, unsigned char * buf, unsigned char size){
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	27 97       	sbiw	r28, 0x07	; 7
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	9c 83       	std	Y+4, r25	; 0x04
     40a:	8b 83       	std	Y+3, r24	; 0x03
     40c:	7e 83       	std	Y+6, r23	; 0x06
     40e:	6d 83       	std	Y+5, r22	; 0x05
     410:	4f 83       	std	Y+7, r20	; 0x07
     // block wait if a write is already in progress
     block_wait_on_write();
     412:	0e 94 42 01 	call	0x284	; 0x284 <block_wait_on_write>

     // read contiguous characters from eeprom and place into buf
     for(int i = 0 ; i < size; i++){
     416:	1a 82       	std	Y+2, r1	; 0x02
     418:	19 82       	std	Y+1, r1	; 0x01
     41a:	22 c0       	rjmp	.+68     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
        set_eear(addr + i);
     41c:	29 81       	ldd	r18, Y+1	; 0x01
     41e:	3a 81       	ldd	r19, Y+2	; 0x02
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	9c 81       	ldd	r25, Y+4	; 0x04
     424:	82 0f       	add	r24, r18
     426:	93 1f       	adc	r25, r19
     428:	0e 94 ef 00 	call	0x1de	; 0x1de <set_eear>
        EECR |= (1<<EERE);
     42c:	8f e3       	ldi	r24, 0x3F	; 63
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2f e3       	ldi	r18, 0x3F	; 63
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	21 60       	ori	r18, 0x01	; 1
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
        buf[i] = EEDR;
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	2d 81       	ldd	r18, Y+5	; 0x05
     444:	3e 81       	ldd	r19, Y+6	; 0x06
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	20 e4       	ldi	r18, 0x40	; 64
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	f9 01       	movw	r30, r18
     450:	20 81       	ld	r18, Z
     452:	fc 01       	movw	r30, r24
     454:	20 83       	st	Z, r18
void eeprom_readbuf(unsigned int addr, unsigned char * buf, unsigned char size){
     // block wait if a write is already in progress
     block_wait_on_write();

     // read contiguous characters from eeprom and place into buf
     for(int i = 0 ; i < size; i++){
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	9a 83       	std	Y+2, r25	; 0x02
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	8f 81       	ldd	r24, Y+7	; 0x07
     462:	28 2f       	mov	r18, r24
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	82 17       	cp	r24, r18
     46c:	93 07       	cpc	r25, r19
     46e:	b4 f2       	brlt	.-84     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     }




}
     470:	00 00       	nop
     472:	27 96       	adiw	r28, 0x07	; 7
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <eeprom_isbusy>:


NOTE:

*/
int eeprom_isbusy(){
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
    return write_busy == 1;
     48c:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <write_busy>
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	91 30       	cpi	r25, 0x01	; 1
     494:	09 f0       	breq	.+2      	; 0x498 <eeprom_isbusy+0x14>
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <main>:
extern config_struct config;
extern vpd_struct vpd;


int main(void)
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <main+0x6>
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
    //initialize classes
    uart_init();
     4ac:	0e 94 a4 09 	call	0x1348	; 0x1348 <uart_init>
    config_init();
     4b0:	0e 94 94 00 	call	0x128	; 0x128 <config_init>
    led_init();
     4b4:	0e 94 01 04 	call	0x802	; 0x802 <led_init>
    log_init();
     4b8:	0e 94 33 04 	call	0x866	; 0x866 <log_init>
    rtc_init(); // also initializes timer1
     4bc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <rtc_init>
    vpd_init();
     4c0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vpd_init>

    // Print assignment Details
    uart_writestr("SER 486 Project 2 - Jared Ham\n\r");
     4c4:	8d e5       	ldi	r24, 0x5D	; 93
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    uart_writestr(vpd.model);
     4cc:	80 e2       	ldi	r24, 0x20	; 32
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    uart_writestr("\n\r");
     4d4:	8d e7       	ldi	r24, 0x7D	; 125
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    uart_writestr(vpd.manufacturer);
     4dc:	8c e2       	ldi	r24, 0x2C	; 44
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    uart_writestr("\n\r");
     4e4:	8d e7       	ldi	r24, 0x7D	; 125
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    uart_writestr(config.token);
     4ec:	84 ec       	ldi	r24, 0xC4	; 196
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    uart_writestr("\n\r");
     4f4:	8d e7       	ldi	r24, 0x7D	; 125
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    uart_writehex8(vpd.checksum);
     4fc:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <vpd+0x36>
     500:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_writehex8>

    // set led to blink morse code for OK
    led_set_blink("--- -.- ");
     504:	80 e8       	ldi	r24, 0x80	; 128
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 95 03 	call	0x72a	; 0x72a <led_set_blink>

    //set rtc clock start time
    rtc_set_by_datestr("01/01/2019 00:00:00");
     50c:	89 e8       	ldi	r24, 0x89	; 137
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 28 06 	call	0xc50	; 0xc50 <rtc_set_by_datestr>

    // set config to use static ip
    config.use_static_ip = 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end+0xc>
    config_set_modified();
     51a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <config_set_modified>

    int dumped = 0;
     51e:	1a 82       	std	Y+2, r1	; 0x02
     520:	19 82       	std	Y+1, r1	; 0x01

    log_add_record(0xaa);
     522:	8a ea       	ldi	r24, 0xAA	; 170
     524:	0e 94 2e 05 	call	0xa5c	; 0xa5c <log_add_record>
    log_add_record(0xbb);
     528:	8b eb       	ldi	r24, 0xBB	; 187
     52a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <log_add_record>
    log_add_record(0xcc);
     52e:	8c ec       	ldi	r24, 0xCC	; 204
     530:	0e 94 2e 05 	call	0xa5c	; 0xa5c <log_add_record>

    while(1){
        config_update();
     534:	0e 94 be 00 	call	0x17c	; 0x17c <config_update>
        led_update();
     538:	0e 94 a7 03 	call	0x74e	; 0x74e <led_update>
        log_update();
     53c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <log_update>


        //instructor provided code below to dump eeprom data;
        if ((!eeprom_isbusy()) && (!dumped)) {
     540:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     544:	89 2b       	or	r24, r25
     546:	b1 f7       	brne	.-20     	; 0x534 <main+0x92>
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	89 2b       	or	r24, r25
     54e:	91 f7       	brne	.-28     	; 0x534 <main+0x92>
            dump_eeprom(0,0x100);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <dump_eeprom>
            dumped=1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	9a 83       	std	Y+2, r25	; 0x02
     562:	89 83       	std	Y+1, r24	; 0x01
        }
    }
     564:	e7 cf       	rjmp	.-50     	; 0x534 <main+0x92>

00000566 <update_checksum>:

changes:


*/
void update_checksum(unsigned char *data, unsigned int dsize){
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	27 97       	sbiw	r28, 0x07	; 7
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	9d 83       	std	Y+5, r25	; 0x05
     57c:	8c 83       	std	Y+4, r24	; 0x04
     57e:	7f 83       	std	Y+7, r23	; 0x07
     580:	6e 83       	std	Y+6, r22	; 0x06
    char sum = 0;
     582:	19 82       	std	Y+1, r1	; 0x01

     for(int i = 0; i < dsize - 1; i++){
     584:	1b 82       	std	Y+3, r1	; 0x03
     586:	1a 82       	std	Y+2, r1	; 0x02
     588:	10 c0       	rjmp	.+32     	; 0x5aa <update_checksum+0x44>
        sum += data[i];
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	9b 81       	ldd	r25, Y+3	; 0x03
     58e:	2c 81       	ldd	r18, Y+4	; 0x04
     590:	3d 81       	ldd	r19, Y+5	; 0x05
     592:	82 0f       	add	r24, r18
     594:	93 1f       	adc	r25, r19
     596:	fc 01       	movw	r30, r24
     598:	90 81       	ld	r25, Z
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	89 0f       	add	r24, r25
     59e:	89 83       	std	Y+1, r24	; 0x01

*/
void update_checksum(unsigned char *data, unsigned int dsize){
    char sum = 0;

     for(int i = 0; i < dsize - 1; i++){
     5a0:	8a 81       	ldd	r24, Y+2	; 0x02
     5a2:	9b 81       	ldd	r25, Y+3	; 0x03
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	9b 83       	std	Y+3, r25	; 0x03
     5a8:	8a 83       	std	Y+2, r24	; 0x02
     5aa:	8e 81       	ldd	r24, Y+6	; 0x06
     5ac:	9f 81       	ldd	r25, Y+7	; 0x07
     5ae:	9c 01       	movw	r18, r24
     5b0:	21 50       	subi	r18, 0x01	; 1
     5b2:	31 09       	sbc	r19, r1
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	9b 81       	ldd	r25, Y+3	; 0x03
     5b8:	82 17       	cp	r24, r18
     5ba:	93 07       	cpc	r25, r19
     5bc:	30 f3       	brcs	.-52     	; 0x58a <update_checksum+0x24>
        sum += data[i];
    }

    data[dsize - 1] = 0-sum;
     5be:	8e 81       	ldd	r24, Y+6	; 0x06
     5c0:	9f 81       	ldd	r25, Y+7	; 0x07
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	2c 81       	ldd	r18, Y+4	; 0x04
     5c6:	3d 81       	ldd	r19, Y+5	; 0x05
     5c8:	82 0f       	add	r24, r18
     5ca:	93 1f       	adc	r25, r19
     5cc:	29 81       	ldd	r18, Y+1	; 0x01
     5ce:	21 95       	neg	r18
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
}
     5d4:	00 00       	nop
     5d6:	27 96       	adiw	r28, 0x07	; 7
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <is_checksum_valid>:

changes:


*/
int is_checksum_valid(unsigned char *data, unsigned int dsize){
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	27 97       	sbiw	r28, 0x07	; 7
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	9d 83       	std	Y+5, r25	; 0x05
     5fe:	8c 83       	std	Y+4, r24	; 0x04
     600:	7f 83       	std	Y+7, r23	; 0x07
     602:	6e 83       	std	Y+6, r22	; 0x06
    char sum = 0;
     604:	19 82       	std	Y+1, r1	; 0x01

    for(int i = 0; i < dsize ; i++){
     606:	1b 82       	std	Y+3, r1	; 0x03
     608:	1a 82       	std	Y+2, r1	; 0x02
     60a:	10 c0       	rjmp	.+32     	; 0x62c <is_checksum_valid+0x44>
        sum += data[i];
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	9b 81       	ldd	r25, Y+3	; 0x03
     610:	2c 81       	ldd	r18, Y+4	; 0x04
     612:	3d 81       	ldd	r19, Y+5	; 0x05
     614:	82 0f       	add	r24, r18
     616:	93 1f       	adc	r25, r19
     618:	fc 01       	movw	r30, r24
     61a:	90 81       	ld	r25, Z
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	89 0f       	add	r24, r25
     620:	89 83       	std	Y+1, r24	; 0x01

*/
int is_checksum_valid(unsigned char *data, unsigned int dsize){
    char sum = 0;

    for(int i = 0; i < dsize ; i++){
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	9b 81       	ldd	r25, Y+3	; 0x03
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	9b 83       	std	Y+3, r25	; 0x03
     62a:	8a 83       	std	Y+2, r24	; 0x02
     62c:	2a 81       	ldd	r18, Y+2	; 0x02
     62e:	3b 81       	ldd	r19, Y+3	; 0x03
     630:	8e 81       	ldd	r24, Y+6	; 0x06
     632:	9f 81       	ldd	r25, Y+7	; 0x07
     634:	28 17       	cp	r18, r24
     636:	39 07       	cpc	r19, r25
     638:	48 f3       	brcs	.-46     	; 0x60c <is_checksum_valid+0x24>
        sum += data[i];
    }

    return sum == 0;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	99 81       	ldd	r25, Y+1	; 0x01
     63e:	99 23       	and	r25, r25
     640:	09 f0       	breq	.+2      	; 0x644 <is_checksum_valid+0x5c>
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	88 2f       	mov	r24, r24
     646:	90 e0       	ldi	r25, 0x00	; 0
}
     648:	27 96       	adiw	r28, 0x07	; 7
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <vpd_is_data_valid>:
changes:
    NONE


 */
 static int vpd_is_data_valid(){
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	00 d0       	rcall	.+0      	; 0x660 <vpd_is_data_valid+0x6>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     int result = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	9a 83       	std	Y+2, r25	; 0x02
     66a:	89 83       	std	Y+1, r24	; 0x01

     if(vpd.token[0] != 'S' || vpd.token[1] != 'E' || vpd.token[2] != 'R' || vpd.token[3] != '\0'){
     66c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <vpd>
     670:	83 35       	cpi	r24, 0x53	; 83
     672:	61 f4       	brne	.+24     	; 0x68c <vpd_is_data_valid+0x32>
     674:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <vpd+0x1>
     678:	85 34       	cpi	r24, 0x45	; 69
     67a:	41 f4       	brne	.+16     	; 0x68c <vpd_is_data_valid+0x32>
     67c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <vpd+0x2>
     680:	82 35       	cpi	r24, 0x52	; 82
     682:	21 f4       	brne	.+8      	; 0x68c <vpd_is_data_valid+0x32>
     684:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <vpd+0x3>
     688:	88 23       	and	r24, r24
     68a:	11 f0       	breq	.+4      	; 0x690 <vpd_is_data_valid+0x36>
        result = 0;
     68c:	1a 82       	std	Y+2, r1	; 0x02
     68e:	19 82       	std	Y+1, r1	; 0x01
     }

     if(! is_checksum_valid((unsigned char*)&vpd,sizeof(vpd))){
     690:	67 e3       	ldi	r22, 0x37	; 55
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	8c e1       	ldi	r24, 0x1C	; 28
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <is_checksum_valid>
     69c:	89 2b       	or	r24, r25
     69e:	11 f4       	brne	.+4      	; 0x6a4 <vpd_is_data_valid+0x4a>
        result = 0;
     6a0:	1a 82       	std	Y+2, r1	; 0x02
     6a2:	19 82       	std	Y+1, r1	; 0x01
     }

     return result;
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 }
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <vpd_write_defaults>:
changes:
    The first 55 bytes of eeprom are updated


 */
 static void vpd_write_defaults(){
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     update_checksum((unsigned char*)&defaults, sizeof(defaults));
     6ba:	67 e3       	ldi	r22, 0x37	; 55
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	82 e1       	ldi	r24, 0x12	; 18
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 b3 02 	call	0x566	; 0x566 <update_checksum>

     eeprom_writebuf(0, (unsigned char*)&defaults, sizeof(defaults));
     6c6:	47 e3       	ldi	r20, 0x37	; 55
     6c8:	62 e1       	ldi	r22, 0x12	; 18
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 aa 01 	call	0x354	; 0x354 <eeprom_writebuf>
 }
     6d4:	00 00       	nop
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <vpd_init>:
changes:
    The first 55 bytes of eeprom is potentially updated


 */
 void vpd_init(){
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     // block wait until eeprom is not busy
     while(eeprom_isbusy());
     6e4:	00 00       	nop
     6e6:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     6ea:	89 2b       	or	r24, r25
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <vpd_init+0xa>

     //initialze vpd data with data from eeprom
     eeprom_readbuf(0, (unsigned char*)&vpd, sizeof(vpd_struct));
     6ee:	47 e3       	ldi	r20, 0x37	; 55
     6f0:	6c e1       	ldi	r22, 0x1C	; 28
     6f2:	72 e0       	ldi	r23, 0x02	; 2
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <eeprom_readbuf>

     if(vpd_is_data_valid()){
     6fc:	0e 94 2d 03 	call	0x65a	; 0x65a <vpd_is_data_valid>
     700:	89 2b       	or	r24, r25
     702:	79 f4       	brne	.+30     	; 0x722 <vpd_init+0x46>
        return;
     }

     vpd_write_defaults();
     704:	0e 94 59 03 	call	0x6b2	; 0x6b2 <vpd_write_defaults>

     while(eeprom_isbusy());
     708:	00 00       	nop
     70a:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     70e:	89 2b       	or	r24, r25
     710:	e1 f7       	brne	.-8      	; 0x70a <vpd_init+0x2e>
     eeprom_readbuf(0, (unsigned char*)&vpd, sizeof(vpd_struct));
     712:	47 e3       	ldi	r20, 0x37	; 55
     714:	6c e1       	ldi	r22, 0x1C	; 28
     716:	72 e0       	ldi	r23, 0x02	; 2
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <eeprom_readbuf>
     720:	01 c0       	rjmp	.+2      	; 0x724 <vpd_init+0x48>

     //initialze vpd data with data from eeprom
     eeprom_readbuf(0, (unsigned char*)&vpd, sizeof(vpd_struct));

     if(vpd_is_data_valid()){
        return;
     722:	00 00       	nop
     while(eeprom_isbusy());
     eeprom_readbuf(0, (unsigned char*)&vpd, sizeof(vpd_struct));



 }
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <led_set_blink>:
     72a:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <blink_msg+0x1>
     72e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <blink_msg>
     732:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <blink_pos+0x1>
     736:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <blink_pos>
     73a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <blink_state>
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 a4 0b 	call	0x1748	; 0x1748 <delay_set>
     74a:	0c 94 06 04 	jmp	0x80c	; 0x80c <led_off>

0000074e <led_update>:
     74e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <blink_msg>
     752:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <blink_msg+0x1>
     756:	89 2b       	or	r24, r25
     758:	09 f4       	brne	.+2      	; 0x75c <led_update+0xe>
     75a:	52 c0       	rjmp	.+164    	; 0x800 <led_update+0xb2>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_isdone>
     764:	89 2b       	or	r24, r25
     766:	09 f4       	brne	.+2      	; 0x76a <led_update+0x1c>
     768:	4b c0       	rjmp	.+150    	; 0x800 <led_update+0xb2>
     76a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <blink_state>
     76e:	81 11       	cpse	r24, r1
     770:	34 c0       	rjmp	.+104    	; 0x7da <led_update+0x8c>
     772:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <blink_pos>
     776:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <blink_pos+0x1>
     77a:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <blink_msg>
     77e:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <blink_msg+0x1>
     782:	e2 0f       	add	r30, r18
     784:	f3 1f       	adc	r31, r19
     786:	80 81       	ld	r24, Z
     788:	80 32       	cpi	r24, 0x20	; 32
     78a:	e9 f0       	breq	.+58     	; 0x7c6 <led_update+0x78>
     78c:	3c f4       	brge	.+14     	; 0x79c <led_update+0x4e>
     78e:	81 11       	cpse	r24, r1
     790:	1d c0       	rjmp	.+58     	; 0x7cc <led_update+0x7e>
     792:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <blink_pos+0x1>
     796:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <blink_pos>
     79a:	08 95       	ret
     79c:	8d 32       	cpi	r24, 0x2D	; 45
     79e:	39 f0       	breq	.+14     	; 0x7ae <led_update+0x60>
     7a0:	8e 32       	cpi	r24, 0x2E	; 46
     7a2:	a1 f4       	brne	.+40     	; 0x7cc <led_update+0x7e>
     7a4:	0e 94 04 04 	call	0x808	; 0x808 <led_on>
     7a8:	6a ef       	ldi	r22, 0xFA	; 250
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <led_update+0x68>
     7ae:	0e 94 04 04 	call	0x808	; 0x808 <led_on>
     7b2:	6e ee       	ldi	r22, 0xEE	; 238
     7b4:	72 e0       	ldi	r23, 0x02	; 2
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 a4 0b 	call	0x1748	; 0x1748 <delay_set>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <blink_state>
     7c4:	08 95       	ret
     7c6:	68 ee       	ldi	r22, 0xE8	; 232
     7c8:	73 e0       	ldi	r23, 0x03	; 3
     7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <led_update+0x94>
     7cc:	2f 5f       	subi	r18, 0xFF	; 255
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	30 93 57 02 	sts	0x0257, r19	; 0x800257 <blink_pos+0x1>
     7d4:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <blink_pos>
     7d8:	08 95       	ret
     7da:	0e 94 06 04 	call	0x80c	; 0x80c <led_off>
     7de:	64 e6       	ldi	r22, 0x64	; 100
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <delay_set>
     7ea:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <blink_state>
     7ee:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <blink_pos>
     7f2:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <blink_pos+0x1>
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <blink_pos+0x1>
     7fc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <blink_pos>
     800:	08 95       	ret

00000802 <led_init>:
     802:	21 9a       	sbi	0x04, 1	; 4
     804:	29 98       	cbi	0x05, 1	; 5
     806:	08 95       	ret

00000808 <led_on>:
     808:	29 9a       	sbi	0x05, 1	; 5
     80a:	08 95       	ret

0000080c <led_off>:
     80c:	29 98       	cbi	0x05, 1	; 5
     80e:	08 95       	ret

00000810 <led_is_on>:
     810:	85 b1       	in	r24, 0x05	; 5
     812:	86 95       	lsr	r24
     814:	81 70       	andi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	08 95       	ret

0000081a <log_is_data_valid>:
     81a:	80 31       	cpi	r24, 0x10	; 16
     81c:	91 05       	cpc	r25, r1
     81e:	04 f5       	brge	.+64     	; 0x860 <log_is_data_valid+0x46>
     820:	27 e0       	ldi	r18, 0x07	; 7
     822:	28 9f       	mul	r18, r24
     824:	a0 01       	movw	r20, r0
     826:	29 9f       	mul	r18, r25
     828:	50 0d       	add	r21, r0
     82a:	11 24       	eor	r1, r1
     82c:	fa 01       	movw	r30, r20
     82e:	e5 5a       	subi	r30, 0xA5	; 165
     830:	fd 4f       	sbci	r31, 0xFD	; 253
     832:	80 81       	ld	r24, Z
     834:	81 32       	cpi	r24, 0x21	; 33
     836:	a0 f4       	brcc	.+40     	; 0x860 <log_is_data_valid+0x46>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	fa 01       	movw	r30, r20
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	e5 5a       	subi	r30, 0xA5	; 165
     846:	fd 4f       	sbci	r31, 0xFD	; 253
     848:	30 81       	ld	r19, Z
     84a:	23 0f       	add	r18, r19
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	87 30       	cpi	r24, 0x07	; 7
     850:	91 05       	cpc	r25, r1
     852:	a9 f7       	brne	.-22     	; 0x83e <log_is_data_valid+0x24>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	22 23       	and	r18, r18
     85a:	21 f0       	breq	.+8      	; 0x864 <log_is_data_valid+0x4a>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	08 95       	ret

00000866 <log_init>:
     866:	6f 92       	push	r6
     868:	7f 92       	push	r7
     86a:	8f 92       	push	r8
     86c:	9f 92       	push	r9
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     886:	89 2b       	or	r24, r25
     888:	e1 f7       	brne	.-8      	; 0x882 <log_init+0x1c>
     88a:	0b ec       	ldi	r16, 0xCB	; 203
     88c:	12 e0       	ldi	r17, 0x02	; 2
     88e:	c0 e8       	ldi	r28, 0x80	; 128
     890:	d0 e0       	ldi	r29, 0x00	; 0
     892:	be 01       	movw	r22, r28
     894:	65 52       	subi	r22, 0x25	; 37
     896:	7e 4f       	sbci	r23, 0xFE	; 254
     898:	47 e0       	ldi	r20, 0x07	; 7
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <eeprom_readbuf>
     8a0:	f8 01       	movw	r30, r16
     8a2:	11 92       	st	Z+, r1
     8a4:	8f 01       	movw	r16, r30
     8a6:	27 96       	adiw	r28, 0x07	; 7
     8a8:	c0 3f       	cpi	r28, 0xF0	; 240
     8aa:	d1 05       	cpc	r29, r1
     8ac:	91 f7       	brne	.-28     	; 0x892 <log_init+0x2c>
     8ae:	4b e5       	ldi	r20, 0x5B	; 91
     8b0:	e4 2e       	mov	r14, r20
     8b2:	42 e0       	ldi	r20, 0x02	; 2
     8b4:	f4 2e       	mov	r15, r20
     8b6:	87 01       	movw	r16, r14
     8b8:	c0 e0       	ldi	r28, 0x00	; 0
     8ba:	d0 e0       	ldi	r29, 0x00	; 0
     8bc:	d1 2c       	mov	r13, r1
     8be:	b1 2c       	mov	r11, r1
     8c0:	77 24       	eor	r7, r7
     8c2:	7a 94       	dec	r7
     8c4:	ce 01       	movw	r24, r28
     8c6:	0e 94 0d 04 	call	0x81a	; 0x81a <log_is_data_valid>
     8ca:	89 2b       	or	r24, r25
     8cc:	41 f0       	breq	.+16     	; 0x8de <log_init+0x78>
     8ce:	f8 01       	movw	r30, r16
     8d0:	80 81       	ld	r24, Z
     8d2:	87 15       	cp	r24, r7
     8d4:	20 f4       	brcc	.+8      	; 0x8de <log_init+0x78>
     8d6:	bc 2e       	mov	r11, r28
     8d8:	78 2e       	mov	r7, r24
     8da:	dd 24       	eor	r13, r13
     8dc:	d3 94       	inc	r13
     8de:	21 96       	adiw	r28, 0x01	; 1
     8e0:	09 5f       	subi	r16, 0xF9	; 249
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
     8e4:	c0 31       	cpi	r28, 0x10	; 16
     8e6:	d1 05       	cpc	r29, r1
     8e8:	69 f7       	brne	.-38     	; 0x8c4 <log_init+0x5e>
     8ea:	dd 20       	and	r13, r13
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <log_init+0x8a>
     8ee:	6a c0       	rjmp	.+212    	; 0x9c4 <__stack+0xc5>
     8f0:	b0 92 5a 02 	sts	0x025A, r11	; 0x80025a <last_written>
     8f4:	70 92 59 02 	sts	0x0259, r7	; 0x800259 <last_transaction_written>
     8f8:	cb 2d       	mov	r28, r11
     8fa:	d0 e0       	ldi	r29, 0x00	; 0
     8fc:	8e 01       	movw	r16, r28
     8fe:	0f 5f       	subi	r16, 0xFF	; 255
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	87 2c       	mov	r8, r7
     904:	2f e0       	ldi	r18, 0x0F	; 15
     906:	a2 2e       	mov	r10, r18
     908:	37 e0       	ldi	r19, 0x07	; 7
     90a:	93 2e       	mov	r9, r19
     90c:	68 01       	movw	r12, r16
     90e:	ff e0       	ldi	r31, 0x0F	; 15
     910:	cf 22       	and	r12, r31
     912:	dd 24       	eor	r13, r13
     914:	c6 01       	movw	r24, r12
     916:	0e 94 0d 04 	call	0x81a	; 0x81a <log_is_data_valid>
     91a:	89 2b       	or	r24, r25
     91c:	61 f4       	brne	.+24     	; 0x936 <__stack+0x37>
     91e:	b0 92 58 02 	sts	0x0258, r11	; 0x800258 <tail>
     922:	8e 01       	movw	r16, r28
     924:	01 50       	subi	r16, 0x01	; 1
     926:	11 09       	sbc	r17, r1
     928:	60 97       	sbiw	r28, 0x10	; 16
     92a:	80 e1       	ldi	r24, 0x10	; 16
     92c:	a8 2e       	mov	r10, r24
     92e:	b1 2c       	mov	r11, r1
     930:	97 e0       	ldi	r25, 0x07	; 7
     932:	69 2e       	mov	r6, r25
     934:	3a c0       	rjmp	.+116    	; 0x9aa <__stack+0xab>
     936:	9c 9c       	mul	r9, r12
     938:	f0 01       	movw	r30, r0
     93a:	9d 9c       	mul	r9, r13
     93c:	f0 0d       	add	r31, r0
     93e:	11 24       	eor	r1, r1
     940:	e5 5a       	subi	r30, 0xA5	; 165
     942:	fd 4f       	sbci	r31, 0xFD	; 253
     944:	40 81       	ld	r20, Z
     946:	24 2f       	mov	r18, r20
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	88 2d       	mov	r24, r8
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	8f 71       	andi	r24, 0x1F	; 31
     952:	99 27       	eor	r25, r25
     954:	28 17       	cp	r18, r24
     956:	39 07       	cpc	r19, r25
     958:	11 f7       	brne	.-60     	; 0x91e <__stack+0x1f>
     95a:	c0 92 5a 02 	sts	0x025A, r12	; 0x80025a <last_written>
     95e:	40 93 59 02 	sts	0x0259, r20	; 0x800259 <last_transaction_written>
     962:	aa 94       	dec	r10
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	aa 20       	and	r10, r10
     96a:	c9 f2       	breq	.-78     	; 0x91e <__stack+0x1f>
     96c:	84 2e       	mov	r8, r20
     96e:	ce cf       	rjmp	.-100    	; 0x90c <__stack+0xd>
     970:	f7 01       	movw	r30, r14
     972:	20 81       	ld	r18, Z
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	87 2d       	mov	r24, r7
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	4f 96       	adiw	r24, 0x1f	; 31
     97c:	8f 71       	andi	r24, 0x1F	; 31
     97e:	99 27       	eor	r25, r25
     980:	28 17       	cp	r18, r24
     982:	39 07       	cpc	r19, r25
     984:	31 f5       	brne	.+76     	; 0x9d2 <__stack+0xd3>
     986:	c0 92 58 02 	sts	0x0258, r12	; 0x800258 <tail>
     98a:	68 9c       	mul	r6, r8
     98c:	f0 01       	movw	r30, r0
     98e:	69 9c       	mul	r6, r9
     990:	f0 0d       	add	r31, r0
     992:	11 24       	eor	r1, r1
     994:	e5 5a       	subi	r30, 0xA5	; 165
     996:	fd 4f       	sbci	r31, 0xFD	; 253
     998:	70 80       	ld	r7, Z
     99a:	01 50       	subi	r16, 0x01	; 1
     99c:	11 09       	sbc	r17, r1
     99e:	f7 e0       	ldi	r31, 0x07	; 7
     9a0:	ef 0e       	add	r14, r31
     9a2:	f1 1c       	adc	r15, r1
     9a4:	0c 17       	cp	r16, r28
     9a6:	1d 07       	cpc	r17, r29
     9a8:	a1 f0       	breq	.+40     	; 0x9d2 <__stack+0xd3>
     9aa:	c8 01       	movw	r24, r16
     9ac:	b5 01       	movw	r22, r10
     9ae:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodhi4>
     9b2:	6c 01       	movw	r12, r24
     9b4:	4c 01       	movw	r8, r24
     9b6:	99 24       	eor	r9, r9
     9b8:	c4 01       	movw	r24, r8
     9ba:	0e 94 0d 04 	call	0x81a	; 0x81a <log_is_data_valid>
     9be:	89 2b       	or	r24, r25
     9c0:	b9 f6       	brne	.-82     	; 0x970 <__stack+0x71>
     9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <__stack+0xd3>
     9c4:	8f e0       	ldi	r24, 0x0F	; 15
     9c6:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <last_written>
     9ca:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <last_transaction_written>
     9ce:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <tail>
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	7f 90       	pop	r7
     9ec:	6f 90       	pop	r6
     9ee:	08 95       	ret

000009f0 <log_update>:
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	0e 94 42 02 	call	0x484	; 0x484 <eeprom_isbusy>
     9fe:	89 2b       	or	r24, r25
     a00:	39 f5       	brne	.+78     	; 0xa50 <log_update+0x60>
     a02:	eb ec       	ldi	r30, 0xCB	; 203
     a04:	f2 e0       	ldi	r31, 0x02	; 2
     a06:	c0 e0       	ldi	r28, 0x00	; 0
     a08:	d0 e0       	ldi	r29, 0x00	; 0
     a0a:	81 91       	ld	r24, Z+
     a0c:	88 23       	and	r24, r24
     a0e:	e1 f0       	breq	.+56     	; 0xa48 <log_update+0x58>
     a10:	17 e0       	ldi	r17, 0x07	; 7
     a12:	1c 9f       	mul	r17, r28
     a14:	c0 01       	movw	r24, r0
     a16:	1d 9f       	mul	r17, r29
     a18:	90 0d       	add	r25, r0
     a1a:	11 24       	eor	r1, r1
     a1c:	9c 01       	movw	r18, r24
     a1e:	25 5a       	subi	r18, 0xA5	; 165
     a20:	3d 4f       	sbci	r19, 0xFD	; 253
     a22:	79 01       	movw	r14, r18
     a24:	67 e0       	ldi	r22, 0x07	; 7
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	c9 01       	movw	r24, r18
     a2a:	0e 94 b3 02 	call	0x566	; 0x566 <update_checksum>
     a2e:	c1 9f       	mul	r28, r17
     a30:	c0 01       	movw	r24, r0
     a32:	11 24       	eor	r1, r1
     a34:	47 e0       	ldi	r20, 0x07	; 7
     a36:	b7 01       	movw	r22, r14
     a38:	80 58       	subi	r24, 0x80	; 128
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	0e 94 aa 01 	call	0x354	; 0x354 <eeprom_writebuf>
     a40:	c5 53       	subi	r28, 0x35	; 53
     a42:	dd 4f       	sbci	r29, 0xFD	; 253
     a44:	18 82       	st	Y, r1
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <log_update+0x60>
     a48:	21 96       	adiw	r28, 0x01	; 1
     a4a:	c0 31       	cpi	r28, 0x10	; 16
     a4c:	d1 05       	cpc	r29, r1
     a4e:	e9 f6       	brne	.-70     	; 0xa0a <log_update+0x1a>
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	08 95       	ret

00000a5c <log_add_record>:
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	e8 2e       	mov	r14, r24
     a6a:	c0 91 5a 02 	lds	r28, 0x025A	; 0x80025a <last_written>
     a6e:	d0 e0       	ldi	r29, 0x00	; 0
     a70:	21 96       	adiw	r28, 0x01	; 1
     a72:	cf 70       	andi	r28, 0x0F	; 15
     a74:	dd 27       	eor	r29, r29
     a76:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <tail>
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 0d 04 	call	0x81a	; 0x81a <log_is_data_valid>
     a80:	f8 2e       	mov	r15, r24
     a82:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <last_transaction_written>
     a86:	8f 5f       	subi	r24, 0xFF	; 255
     a88:	81 32       	cpi	r24, 0x21	; 33
     a8a:	18 f4       	brcc	.+6      	; 0xa92 <log_add_record+0x36>
     a8c:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <last_transaction_written>
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <log_add_record+0x3a>
     a92:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <last_transaction_written>
     a96:	87 e0       	ldi	r24, 0x07	; 7
     a98:	8c 9f       	mul	r24, r28
     a9a:	80 01       	movw	r16, r0
     a9c:	8d 9f       	mul	r24, r29
     a9e:	10 0d       	add	r17, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	05 5a       	subi	r16, 0xA5	; 165
     aa4:	1d 4f       	sbci	r17, 0xFD	; 253
     aa6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <last_transaction_written>
     aaa:	f8 01       	movw	r30, r16
     aac:	80 83       	st	Z, r24
     aae:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <rtc_get_date>
     ab2:	f8 01       	movw	r30, r16
     ab4:	61 83       	std	Z+1, r22	; 0x01
     ab6:	72 83       	std	Z+2, r23	; 0x02
     ab8:	83 83       	std	Z+3, r24	; 0x03
     aba:	94 83       	std	Z+4, r25	; 0x04
     abc:	e5 82       	std	Z+5, r14	; 0x05
     abe:	c0 93 5a 02 	sts	0x025A, r28	; 0x80025a <last_written>
     ac2:	67 e0       	ldi	r22, 0x07	; 7
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	c8 01       	movw	r24, r16
     ac8:	0e 94 b3 02 	call	0x566	; 0x566 <update_checksum>
     acc:	c5 53       	subi	r28, 0x35	; 53
     ace:	dd 4f       	sbci	r29, 0xFD	; 253
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	88 83       	st	Y, r24
     ad4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <last_written>
     ad8:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <tail>
     adc:	89 13       	cpse	r24, r25
     ade:	08 c0       	rjmp	.+16     	; 0xaf0 <log_add_record+0x94>
     ae0:	ff 20       	and	r15, r15
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <log_add_record+0x94>
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	8f 70       	andi	r24, 0x0F	; 15
     aea:	99 27       	eor	r25, r25
     aec:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <tail>
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	08 95       	ret

00000afe <log_clear>:
     afe:	eb e5       	ldi	r30, 0x5B	; 91
     b00:	f2 e0       	ldi	r31, 0x02	; 2
     b02:	ab ec       	ldi	r26, 0xCB	; 203
     b04:	b2 e0       	ldi	r27, 0x02	; 2
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	4f ef       	ldi	r20, 0xFF	; 255
     b0a:	5f ef       	ldi	r21, 0xFF	; 255
     b0c:	ba 01       	movw	r22, r20
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	80 83       	st	Z, r24
     b12:	85 83       	std	Z+5, r24	; 0x05
     b14:	41 83       	std	Z+1, r20	; 0x01
     b16:	52 83       	std	Z+2, r21	; 0x02
     b18:	63 83       	std	Z+3, r22	; 0x03
     b1a:	74 83       	std	Z+4, r23	; 0x04
     b1c:	9d 93       	st	X+, r25
     b1e:	37 96       	adiw	r30, 0x07	; 7
     b20:	22 e0       	ldi	r18, 0x02	; 2
     b22:	eb 3c       	cpi	r30, 0xCB	; 203
     b24:	f2 07       	cpc	r31, r18
     b26:	a1 f7       	brne	.-24     	; 0xb10 <log_clear+0x12>
     b28:	8f e0       	ldi	r24, 0x0F	; 15
     b2a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <last_written>
     b2e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <tail>
     b32:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <last_transaction_written>
     b36:	08 95       	ret

00000b38 <log_get_num_entries>:
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	00 91 58 02 	lds	r16, 0x0258	; 0x800258 <tail>
     b44:	c0 2f       	mov	r28, r16
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	d0 e0       	ldi	r29, 0x00	; 0
     b4a:	ce 01       	movw	r24, r28
     b4c:	0e 94 0d 04 	call	0x81a	; 0x81a <log_is_data_valid>
     b50:	89 2b       	or	r24, r25
     b52:	29 f0       	breq	.+10     	; 0xb5e <log_get_num_entries+0x26>
     b54:	21 96       	adiw	r28, 0x01	; 1
     b56:	cf 70       	andi	r28, 0x0F	; 15
     b58:	1f 5f       	subi	r17, 0xFF	; 255
     b5a:	0c 13       	cpse	r16, r28
     b5c:	f5 cf       	rjmp	.-22     	; 0xb48 <log_get_num_entries+0x10>
     b5e:	81 2f       	mov	r24, r17
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <log_get_record>:
     b6a:	af 92       	push	r10
     b6c:	bf 92       	push	r11
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	6b 01       	movw	r12, r22
     b80:	7c 01       	movw	r14, r24
     b82:	8a 01       	movw	r16, r20
     b84:	59 01       	movw	r10, r18
     b86:	0e 94 9c 05 	call	0xb38	; 0xb38 <log_get_num_entries>
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	c8 16       	cp	r12, r24
     b92:	d9 06       	cpc	r13, r25
     b94:	ea 06       	cpc	r14, r26
     b96:	fb 06       	cpc	r15, r27
     b98:	f8 f4       	brcc	.+62     	; 0xbd8 <log_get_record+0x6e>
     b9a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <tail>
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	c8 0e       	add	r12, r24
     ba2:	d9 1e       	adc	r13, r25
     ba4:	8f e0       	ldi	r24, 0x0F	; 15
     ba6:	c8 22       	and	r12, r24
     ba8:	dd 24       	eor	r13, r13
     baa:	87 e0       	ldi	r24, 0x07	; 7
     bac:	8c 9d       	mul	r24, r12
     bae:	f0 01       	movw	r30, r0
     bb0:	8d 9d       	mul	r24, r13
     bb2:	f0 0d       	add	r31, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	e5 5a       	subi	r30, 0xA5	; 165
     bb8:	fd 4f       	sbci	r31, 0xFD	; 253
     bba:	81 81       	ldd	r24, Z+1	; 0x01
     bbc:	92 81       	ldd	r25, Z+2	; 0x02
     bbe:	a3 81       	ldd	r26, Z+3	; 0x03
     bc0:	b4 81       	ldd	r27, Z+4	; 0x04
     bc2:	e8 01       	movw	r28, r16
     bc4:	88 83       	st	Y, r24
     bc6:	99 83       	std	Y+1, r25	; 0x01
     bc8:	aa 83       	std	Y+2, r26	; 0x02
     bca:	bb 83       	std	Y+3, r27	; 0x03
     bcc:	85 81       	ldd	r24, Z+5	; 0x05
     bce:	f5 01       	movw	r30, r10
     bd0:	80 83       	st	Z, r24
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <log_get_record+0x72>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	08 95       	ret

00000bf2 <rtc_init>:
     bf2:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <timer1_init>

00000bf6 <rtc_get_date>:
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	0e 94 8c 09 	call	0x1318	; 0x1318 <timer1_get>
     bfe:	00 91 ed 02 	lds	r16, 0x02ED	; 0x8002ed <rtc_base>
     c02:	10 91 ee 02 	lds	r17, 0x02EE	; 0x8002ee <rtc_base+0x1>
     c06:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <rtc_base+0x2>
     c0a:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <rtc_base+0x3>
     c0e:	60 0f       	add	r22, r16
     c10:	71 1f       	adc	r23, r17
     c12:	82 1f       	adc	r24, r18
     c14:	93 1f       	adc	r25, r19
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <is_leapyear>:
     c1c:	9c 01       	movw	r18, r24
     c1e:	60 e9       	ldi	r22, 0x90	; 144
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
     c26:	89 2b       	or	r24, r25
     c28:	79 f0       	breq	.+30     	; 0xc48 <is_leapyear+0x2c>
     c2a:	c9 01       	movw	r24, r18
     c2c:	83 70       	andi	r24, 0x03	; 3
     c2e:	99 27       	eor	r25, r25
     c30:	89 2b       	or	r24, r25
     c32:	61 f4       	brne	.+24     	; 0xc4c <is_leapyear+0x30>
     c34:	c9 01       	movw	r24, r18
     c36:	64 e6       	ldi	r22, 0x64	; 100
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
     c3e:	9c 01       	movw	r18, r24
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	23 2b       	or	r18, r19
     c44:	21 f4       	brne	.+8      	; 0xc4e <is_leapyear+0x32>
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <is_leapyear+0x30>
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	08 95       	ret

00000c50 <rtc_set_by_datestr>:
     c50:	2f 92       	push	r2
     c52:	3f 92       	push	r3
     c54:	4f 92       	push	r4
     c56:	5f 92       	push	r5
     c58:	6f 92       	push	r6
     c5a:	7f 92       	push	r7
     c5c:	8f 92       	push	r8
     c5e:	9f 92       	push	r9
     c60:	af 92       	push	r10
     c62:	bf 92       	push	r11
     c64:	cf 92       	push	r12
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	67 97       	sbiw	r28, 0x17	; 23
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	2c e0       	ldi	r18, 0x0C	; 12
     c86:	ed e9       	ldi	r30, 0x9D	; 157
     c88:	f1 e0       	ldi	r31, 0x01	; 1
     c8a:	ae 01       	movw	r20, r28
     c8c:	4f 5f       	subi	r20, 0xFF	; 255
     c8e:	5f 4f       	sbci	r21, 0xFF	; 255
     c90:	1a 01       	movw	r2, r20
     c92:	da 01       	movw	r26, r20
     c94:	01 90       	ld	r0, Z+
     c96:	0d 92       	st	X+, r0
     c98:	2a 95       	dec	r18
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <rtc_set_by_datestr+0x44>
     c9c:	dc 01       	movw	r26, r24
     c9e:	2c 91       	ld	r18, X
     ca0:	22 0f       	add	r18, r18
     ca2:	20 56       	subi	r18, 0x60	; 96
     ca4:	32 2f       	mov	r19, r18
     ca6:	33 0f       	add	r19, r19
     ca8:	33 0f       	add	r19, r19
     caa:	23 0f       	add	r18, r19
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	3c 91       	ld	r19, X
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	31 53       	subi	r19, 0x31	; 49
     cb4:	23 0f       	add	r18, r19
     cb6:	2d 87       	std	Y+13, r18	; 0x0d
     cb8:	13 96       	adiw	r26, 0x03	; 3
     cba:	2c 91       	ld	r18, X
     cbc:	13 97       	sbiw	r26, 0x03	; 3
     cbe:	02 2e       	mov	r0, r18
     cc0:	00 0c       	add	r0, r0
     cc2:	33 0b       	sbc	r19, r19
     cc4:	20 53       	subi	r18, 0x30	; 48
     cc6:	31 09       	sbc	r19, r1
     cc8:	6a e0       	ldi	r22, 0x0A	; 10
     cca:	62 9f       	mul	r22, r18
     ccc:	a0 01       	movw	r20, r0
     cce:	63 9f       	mul	r22, r19
     cd0:	50 0d       	add	r21, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	14 96       	adiw	r26, 0x04	; 4
     cd6:	cc 90       	ld	r12, X
     cd8:	0c 2c       	mov	r0, r12
     cda:	00 0c       	add	r0, r0
     cdc:	dd 08       	sbc	r13, r13
     cde:	b0 e3       	ldi	r27, 0x30	; 48
     ce0:	cb 1a       	sub	r12, r27
     ce2:	d1 08       	sbc	r13, r1
     ce4:	c4 0e       	add	r12, r20
     ce6:	d5 1e       	adc	r13, r21
     ce8:	86 01       	movw	r16, r12
     cea:	01 50       	subi	r16, 0x01	; 1
     cec:	11 09       	sbc	r17, r1
     cee:	fc 01       	movw	r30, r24
     cf0:	26 81       	ldd	r18, Z+6	; 0x06
     cf2:	02 2e       	mov	r0, r18
     cf4:	00 0c       	add	r0, r0
     cf6:	33 0b       	sbc	r19, r19
     cf8:	20 53       	subi	r18, 0x30	; 48
     cfa:	31 09       	sbc	r19, r1
     cfc:	e8 ee       	ldi	r30, 0xE8	; 232
     cfe:	f3 e0       	ldi	r31, 0x03	; 3
     d00:	2e 9f       	mul	r18, r30
     d02:	a0 01       	movw	r20, r0
     d04:	2f 9f       	mul	r18, r31
     d06:	50 0d       	add	r21, r0
     d08:	3e 9f       	mul	r19, r30
     d0a:	50 0d       	add	r21, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	dc 01       	movw	r26, r24
     d10:	17 96       	adiw	r26, 0x07	; 7
     d12:	2c 91       	ld	r18, X
     d14:	17 97       	sbiw	r26, 0x07	; 7
     d16:	02 2e       	mov	r0, r18
     d18:	00 0c       	add	r0, r0
     d1a:	33 0b       	sbc	r19, r19
     d1c:	20 53       	subi	r18, 0x30	; 48
     d1e:	31 09       	sbc	r19, r1
     d20:	74 e6       	ldi	r23, 0x64	; 100
     d22:	72 9f       	mul	r23, r18
     d24:	70 01       	movw	r14, r0
     d26:	73 9f       	mul	r23, r19
     d28:	f0 0c       	add	r15, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	e4 0e       	add	r14, r20
     d2e:	f5 1e       	adc	r15, r21
     d30:	18 96       	adiw	r26, 0x08	; 8
     d32:	4c 91       	ld	r20, X
     d34:	18 97       	sbiw	r26, 0x08	; 8
     d36:	04 2e       	mov	r0, r20
     d38:	00 0c       	add	r0, r0
     d3a:	55 0b       	sbc	r21, r21
     d3c:	40 53       	subi	r20, 0x30	; 48
     d3e:	51 09       	sbc	r21, r1
     d40:	64 9f       	mul	r22, r20
     d42:	90 01       	movw	r18, r0
     d44:	65 9f       	mul	r22, r21
     d46:	30 0d       	add	r19, r0
     d48:	11 24       	eor	r1, r1
     d4a:	e2 0e       	add	r14, r18
     d4c:	f3 1e       	adc	r15, r19
     d4e:	19 96       	adiw	r26, 0x09	; 9
     d50:	2c 91       	ld	r18, X
     d52:	19 97       	sbiw	r26, 0x09	; 9
     d54:	f7 01       	movw	r30, r14
     d56:	e2 0f       	add	r30, r18
     d58:	f1 1d       	adc	r31, r1
     d5a:	27 fd       	sbrc	r18, 7
     d5c:	fa 95       	dec	r31
     d5e:	af 01       	movw	r20, r30
     d60:	58 50       	subi	r21, 0x08	; 8
     d62:	7a 01       	movw	r14, r20
     d64:	1b 96       	adiw	r26, 0x0b	; 11
     d66:	2c 91       	ld	r18, X
     d68:	1b 97       	sbiw	r26, 0x0b	; 11
     d6a:	22 0f       	add	r18, r18
     d6c:	20 56       	subi	r18, 0x60	; 96
     d6e:	32 2f       	mov	r19, r18
     d70:	33 0f       	add	r19, r19
     d72:	33 0f       	add	r19, r19
     d74:	23 0f       	add	r18, r19
     d76:	1c 96       	adiw	r26, 0x0c	; 12
     d78:	3c 91       	ld	r19, X
     d7a:	1c 97       	sbiw	r26, 0x0c	; 12
     d7c:	30 53       	subi	r19, 0x30	; 48
     d7e:	23 0f       	add	r18, r19
     d80:	29 8b       	std	Y+17, r18	; 0x11
     d82:	1e 96       	adiw	r26, 0x0e	; 14
     d84:	2c 91       	ld	r18, X
     d86:	1e 97       	sbiw	r26, 0x0e	; 14
     d88:	22 0f       	add	r18, r18
     d8a:	20 56       	subi	r18, 0x60	; 96
     d8c:	32 2f       	mov	r19, r18
     d8e:	33 0f       	add	r19, r19
     d90:	33 0f       	add	r19, r19
     d92:	23 0f       	add	r18, r19
     d94:	1f 96       	adiw	r26, 0x0f	; 15
     d96:	3c 91       	ld	r19, X
     d98:	1f 97       	sbiw	r26, 0x0f	; 15
     d9a:	30 53       	subi	r19, 0x30	; 48
     d9c:	23 0f       	add	r18, r19
     d9e:	2a 8b       	std	Y+18, r18	; 0x12
     da0:	51 96       	adiw	r26, 0x11	; 17
     da2:	2c 91       	ld	r18, X
     da4:	51 97       	sbiw	r26, 0x11	; 17
     da6:	22 0f       	add	r18, r18
     da8:	20 56       	subi	r18, 0x60	; 96
     daa:	32 2f       	mov	r19, r18
     dac:	33 0f       	add	r19, r19
     dae:	33 0f       	add	r19, r19
     db0:	23 0f       	add	r18, r19
     db2:	52 96       	adiw	r26, 0x12	; 18
     db4:	8c 91       	ld	r24, X
     db6:	80 53       	subi	r24, 0x30	; 48
     db8:	28 0f       	add	r18, r24
     dba:	2b 8b       	std	Y+19, r18	; 0x13
     dbc:	ca 01       	movw	r24, r20
     dbe:	0e 94 0e 06 	call	0xc1c	; 0xc1c <is_leapyear>
     dc2:	88 23       	and	r24, r24
     dc4:	21 f0       	breq	.+8      	; 0xdce <rtc_set_by_datestr+0x17e>
     dc6:	5d 85       	ldd	r21, Y+13	; 0x0d
     dc8:	52 30       	cpi	r21, 0x02	; 2
     dca:	08 f0       	brcs	.+2      	; 0xdce <rtc_set_by_datestr+0x17e>
     dcc:	86 01       	movw	r16, r12
     dce:	c7 01       	movw	r24, r14
     dd0:	60 e9       	ldi	r22, 0x90	; 144
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
     dd8:	fc 01       	movw	r30, r24
     dda:	db 01       	movw	r26, r22
     ddc:	20 e8       	ldi	r18, 0x80	; 128
     dde:	39 e5       	ldi	r19, 0x59	; 89
     de0:	40 e6       	ldi	r20, 0x60	; 96
     de2:	50 ef       	ldi	r21, 0xF0	; 240
     de4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
     de8:	2b 01       	movw	r4, r22
     dea:	3c 01       	movw	r6, r24
     dec:	cf 01       	movw	r24, r30
     dee:	64 e6       	ldi	r22, 0x64	; 100
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
     df6:	fc 01       	movw	r30, r24
     df8:	db 01       	movw	r26, r22
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	32 ec       	ldi	r19, 0xC2	; 194
     dfe:	47 e1       	ldi	r20, 0x17	; 23
     e00:	5c eb       	ldi	r21, 0xBC	; 188
     e02:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
     e06:	4b 01       	movw	r8, r22
     e08:	5c 01       	movw	r10, r24
     e0a:	df 01       	movw	r26, r30
     e0c:	b6 95       	lsr	r27
     e0e:	a7 95       	ror	r26
     e10:	b6 95       	lsr	r27
     e12:	a7 95       	ror	r26
     e14:	20 e8       	ldi	r18, 0x80	; 128
     e16:	3f e1       	ldi	r19, 0x1F	; 31
     e18:	46 e8       	ldi	r20, 0x86	; 134
     e1a:	57 e0       	ldi	r21, 0x07	; 7
     e1c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
     e24:	df 01       	movw	r26, r30
     e26:	a3 70       	andi	r26, 0x03	; 3
     e28:	bb 27       	eor	r27, r27
     e2a:	20 e8       	ldi	r18, 0x80	; 128
     e2c:	33 e3       	ldi	r19, 0x33	; 51
     e2e:	41 ee       	ldi	r20, 0xE1	; 225
     e30:	51 e0       	ldi	r21, 0x01	; 1
     e32:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
     e36:	6c 8b       	std	Y+20, r22	; 0x14
     e38:	7d 8b       	std	Y+21, r23	; 0x15
     e3a:	8e 8b       	std	Y+22, r24	; 0x16
     e3c:	9f 8b       	std	Y+23, r25	; 0x17
     e3e:	f1 01       	movw	r30, r2
     e40:	8e 2f       	mov	r24, r30
     e42:	82 19       	sub	r24, r2
     e44:	9d 85       	ldd	r25, Y+13	; 0x0d
     e46:	89 17       	cp	r24, r25
     e48:	20 f4       	brcc	.+8      	; 0xe52 <rtc_set_by_datestr+0x202>
     e4a:	81 91       	ld	r24, Z+
     e4c:	08 0f       	add	r16, r24
     e4e:	11 1d       	adc	r17, r1
     e50:	f7 cf       	rjmp	.-18     	; 0xe40 <rtc_set_by_datestr+0x1f0>
     e52:	a9 89       	ldd	r26, Y+17	; 0x11
     e54:	2a 2f       	mov	r18, r26
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	a0 e1       	ldi	r26, 0x10	; 16
     e5a:	be e0       	ldi	r27, 0x0E	; 14
     e5c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__umulhisi3>
     e60:	6d 87       	std	Y+13, r22	; 0x0d
     e62:	7e 87       	std	Y+14, r23	; 0x0e
     e64:	8f 87       	std	Y+15, r24	; 0x0f
     e66:	98 8b       	std	Y+16, r25	; 0x10
     e68:	ba 89       	ldd	r27, Y+18	; 0x12
     e6a:	2b 2f       	mov	r18, r27
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	ac e3       	ldi	r26, 0x3C	; 60
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__umulhisi3>
     e76:	2d 85       	ldd	r18, Y+13	; 0x0d
     e78:	3e 85       	ldd	r19, Y+14	; 0x0e
     e7a:	4f 85       	ldd	r20, Y+15	; 0x0f
     e7c:	58 89       	ldd	r21, Y+16	; 0x10
     e7e:	26 0f       	add	r18, r22
     e80:	37 1f       	adc	r19, r23
     e82:	48 1f       	adc	r20, r24
     e84:	59 1f       	adc	r21, r25
     e86:	da 01       	movw	r26, r20
     e88:	c9 01       	movw	r24, r18
     e8a:	3b 89       	ldd	r19, Y+19	; 0x13
     e8c:	83 0f       	add	r24, r19
     e8e:	91 1d       	adc	r25, r1
     e90:	a1 1d       	adc	r26, r1
     e92:	b1 1d       	adc	r27, r1
     e94:	48 0e       	add	r4, r24
     e96:	59 1e       	adc	r5, r25
     e98:	6a 1e       	adc	r6, r26
     e9a:	7b 1e       	adc	r7, r27
     e9c:	84 0c       	add	r8, r4
     e9e:	95 1c       	adc	r9, r5
     ea0:	a6 1c       	adc	r10, r6
     ea2:	b7 1c       	adc	r11, r7
     ea4:	c8 0c       	add	r12, r8
     ea6:	d9 1c       	adc	r13, r9
     ea8:	ea 1c       	adc	r14, r10
     eaa:	fb 1c       	adc	r15, r11
     eac:	8c 89       	ldd	r24, Y+20	; 0x14
     eae:	9d 89       	ldd	r25, Y+21	; 0x15
     eb0:	ae 89       	ldd	r26, Y+22	; 0x16
     eb2:	bf 89       	ldd	r27, Y+23	; 0x17
     eb4:	c8 0e       	add	r12, r24
     eb6:	d9 1e       	adc	r13, r25
     eb8:	ea 1e       	adc	r14, r26
     eba:	fb 1e       	adc	r15, r27
     ebc:	d8 01       	movw	r26, r16
     ebe:	20 e8       	ldi	r18, 0x80	; 128
     ec0:	31 e5       	ldi	r19, 0x51	; 81
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8c 0d       	add	r24, r12
     ed0:	9d 1d       	adc	r25, r13
     ed2:	ae 1d       	adc	r26, r14
     ed4:	bf 1d       	adc	r27, r15
     ed6:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <rtc_base>
     eda:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <rtc_base+0x1>
     ede:	a0 93 ef 02 	sts	0x02EF, r26	; 0x8002ef <rtc_base+0x2>
     ee2:	b0 93 f0 02 	sts	0x02F0, r27	; 0x8002f0 <rtc_base+0x3>
     ee6:	67 96       	adiw	r28, 0x17	; 23
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	9f 90       	pop	r9
     f08:	8f 90       	pop	r8
     f0a:	7f 90       	pop	r7
     f0c:	6f 90       	pop	r6
     f0e:	5f 90       	pop	r5
     f10:	4f 90       	pop	r4
     f12:	3f 90       	pop	r3
     f14:	2f 90       	pop	r2
     f16:	0c 94 98 09 	jmp	0x1330	; 0x1330 <timer1_clear>

00000f1a <get_month>:
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	68 97       	sbiw	r28, 0x18	; 24
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	7b 01       	movw	r14, r22
     f38:	2c e0       	ldi	r18, 0x0C	; 12
     f3a:	ed e9       	ldi	r30, 0x9D	; 157
     f3c:	f1 e0       	ldi	r31, 0x01	; 1
     f3e:	de 01       	movw	r26, r28
     f40:	1d 96       	adiw	r26, 0x0d	; 13
     f42:	01 90       	ld	r0, Z+
     f44:	0d 92       	st	X+, r0
     f46:	2a 95       	dec	r18
     f48:	e1 f7       	brne	.-8      	; 0xf42 <get_month+0x28>
     f4a:	8e 01       	movw	r16, r28
     f4c:	0f 5f       	subi	r16, 0xFF	; 255
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	2c e0       	ldi	r18, 0x0C	; 12
     f52:	f8 01       	movw	r30, r16
     f54:	11 92       	st	Z+, r1
     f56:	2a 95       	dec	r18
     f58:	e9 f7       	brne	.-6      	; 0xf54 <get_month+0x3a>
     f5a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <is_leapyear>
     f5e:	8a 83       	std	Y+2, r24	; 0x02
     f60:	de 01       	movw	r26, r28
     f62:	1d 96       	adiw	r26, 0x0d	; 13
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	f7 01       	movw	r30, r14
     f68:	40 81       	ld	r20, Z
     f6a:	51 81       	ldd	r21, Z+1	; 0x01
     f6c:	9d 91       	ld	r25, X+
     f6e:	f8 01       	movw	r30, r16
     f70:	21 91       	ld	r18, Z+
     f72:	8f 01       	movw	r16, r30
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	29 0f       	add	r18, r25
     f78:	31 1d       	adc	r19, r1
     f7a:	42 17       	cp	r20, r18
     f7c:	53 07       	cpc	r21, r19
     f7e:	40 f0       	brcs	.+16     	; 0xf90 <get_month+0x76>
     f80:	42 1b       	sub	r20, r18
     f82:	53 0b       	sbc	r21, r19
     f84:	f7 01       	movw	r30, r14
     f86:	51 83       	std	Z+1, r21	; 0x01
     f88:	40 83       	st	Z, r20
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	8c 30       	cpi	r24, 0x0C	; 12
     f8e:	59 f7       	brne	.-42     	; 0xf66 <get_month+0x4c>
     f90:	68 96       	adiw	r28, 0x18	; 24
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	08 95       	ret

00000faa <rtc_num2datestr>:
     faa:	4f 92       	push	r4
     fac:	5f 92       	push	r5
     fae:	6f 92       	push	r6
     fb0:	7f 92       	push	r7
     fb2:	8f 92       	push	r8
     fb4:	9f 92       	push	r9
     fb6:	af 92       	push	r10
     fb8:	bf 92       	push	r11
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <rtc_num2datestr+0x1e>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	2b 01       	movw	r4, r22
     fce:	3c 01       	movw	r6, r24
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	20 e8       	ldi	r18, 0x80	; 128
     fda:	42 16       	cp	r4, r18
     fdc:	29 e5       	ldi	r18, 0x59	; 89
     fde:	52 06       	cpc	r5, r18
     fe0:	20 e6       	ldi	r18, 0x60	; 96
     fe2:	62 06       	cpc	r6, r18
     fe4:	20 ef       	ldi	r18, 0xF0	; 240
     fe6:	72 06       	cpc	r7, r18
     fe8:	18 f4       	brcc	.+6      	; 0xff0 <rtc_num2datestr+0x46>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	dc 01       	movw	r26, r24
     ff0:	20 e9       	ldi	r18, 0x90	; 144
     ff2:	31 e0       	ldi	r19, 0x01	; 1
     ff4:	82 9f       	mul	r24, r18
     ff6:	50 01       	movw	r10, r0
     ff8:	83 9f       	mul	r24, r19
     ffa:	b0 0c       	add	r11, r0
     ffc:	92 9f       	mul	r25, r18
     ffe:	b0 0c       	add	r11, r0
    1000:	11 24       	eor	r1, r1
    1002:	80 e3       	ldi	r24, 0x30	; 48
    1004:	a8 1a       	sub	r10, r24
    1006:	88 ef       	ldi	r24, 0xF8	; 248
    1008:	b8 0a       	sbc	r11, r24
    100a:	c1 2c       	mov	r12, r1
    100c:	d1 2c       	mov	r13, r1
    100e:	76 01       	movw	r14, r12
    1010:	c3 94       	inc	r12
    1012:	20 e8       	ldi	r18, 0x80	; 128
    1014:	42 16       	cp	r4, r18
    1016:	29 e5       	ldi	r18, 0x59	; 89
    1018:	52 06       	cpc	r5, r18
    101a:	20 e6       	ldi	r18, 0x60	; 96
    101c:	62 06       	cpc	r6, r18
    101e:	20 ef       	ldi	r18, 0xF0	; 240
    1020:	72 06       	cpc	r7, r18
    1022:	18 f4       	brcc	.+6      	; 0x102a <rtc_num2datestr+0x80>
    1024:	c1 2c       	mov	r12, r1
    1026:	d1 2c       	mov	r13, r1
    1028:	76 01       	movw	r14, r12
    102a:	a7 01       	movw	r20, r14
    102c:	96 01       	movw	r18, r12
    102e:	60 e8       	ldi	r22, 0x80	; 128
    1030:	79 e5       	ldi	r23, 0x59	; 89
    1032:	80 e6       	ldi	r24, 0x60	; 96
    1034:	90 ef       	ldi	r25, 0xF0	; 240
    1036:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__mulsi3>
    103a:	73 01       	movw	r14, r6
    103c:	62 01       	movw	r12, r4
    103e:	c6 1a       	sub	r12, r22
    1040:	d7 0a       	sbc	r13, r23
    1042:	e8 0a       	sbc	r14, r24
    1044:	f9 0a       	sbc	r15, r25
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	c1 14       	cp	r12, r1
    1050:	22 ec       	ldi	r18, 0xC2	; 194
    1052:	d2 06       	cpc	r13, r18
    1054:	27 e1       	ldi	r18, 0x17	; 23
    1056:	e2 06       	cpc	r14, r18
    1058:	2c eb       	ldi	r18, 0xBC	; 188
    105a:	f2 06       	cpc	r15, r18
    105c:	18 f4       	brcc	.+6      	; 0x1064 <rtc_num2datestr+0xba>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	dc 01       	movw	r26, r24
    1064:	44 e6       	ldi	r20, 0x64	; 100
    1066:	48 9f       	mul	r20, r24
    1068:	90 01       	movw	r18, r0
    106a:	49 9f       	mul	r20, r25
    106c:	30 0d       	add	r19, r0
    106e:	11 24       	eor	r1, r1
    1070:	a2 0e       	add	r10, r18
    1072:	b3 1e       	adc	r11, r19
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	c1 14       	cp	r12, r1
    107e:	82 ec       	ldi	r24, 0xC2	; 194
    1080:	d8 06       	cpc	r13, r24
    1082:	87 e1       	ldi	r24, 0x17	; 23
    1084:	e8 06       	cpc	r14, r24
    1086:	8c eb       	ldi	r24, 0xBC	; 188
    1088:	f8 06       	cpc	r15, r24
    108a:	18 f4       	brcc	.+6      	; 0x1092 <rtc_num2datestr+0xe8>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	a9 01       	movw	r20, r18
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	72 ec       	ldi	r23, 0xC2	; 194
    1096:	87 e1       	ldi	r24, 0x17	; 23
    1098:	9c eb       	ldi	r25, 0xBC	; 188
    109a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__mulsi3>
    109e:	a7 01       	movw	r20, r14
    10a0:	96 01       	movw	r18, r12
    10a2:	26 1b       	sub	r18, r22
    10a4:	37 0b       	sbc	r19, r23
    10a6:	48 0b       	sbc	r20, r24
    10a8:	59 0b       	sbc	r21, r25
    10aa:	ca 01       	movw	r24, r20
    10ac:	b9 01       	movw	r22, r18
    10ae:	20 e8       	ldi	r18, 0x80	; 128
    10b0:	3f e1       	ldi	r19, 0x1F	; 31
    10b2:	46 e8       	ldi	r20, 0x86	; 134
    10b4:	57 e0       	ldi	r21, 0x07	; 7
    10b6:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__udivmodsi4>
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	22 0f       	add	r18, r18
    10c0:	33 1f       	adc	r19, r19
    10c2:	a2 0e       	add	r10, r18
    10c4:	b3 1e       	adc	r11, r19
    10c6:	20 e8       	ldi	r18, 0x80	; 128
    10c8:	33 e3       	ldi	r19, 0x33	; 51
    10ca:	41 ee       	ldi	r20, 0xE1	; 225
    10cc:	51 e0       	ldi	r21, 0x01	; 1
    10ce:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__udivmodsi4>
    10d2:	75 01       	movw	r14, r10
    10d4:	e2 0e       	add	r14, r18
    10d6:	f3 1e       	adc	r15, r19
    10d8:	20 e8       	ldi	r18, 0x80	; 128
    10da:	31 e5       	ldi	r19, 0x51	; 81
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__udivmodsi4>
    10e4:	4b 01       	movw	r8, r22
    10e6:	5c 01       	movw	r10, r24
    10e8:	3a 83       	std	Y+2, r19	; 0x02
    10ea:	29 83       	std	Y+1, r18	; 0x01
    10ec:	be 01       	movw	r22, r28
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	c7 01       	movw	r24, r14
    10f4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <get_month>
    10f8:	d8 2e       	mov	r13, r24
    10fa:	c5 01       	movw	r24, r10
    10fc:	b4 01       	movw	r22, r8
    10fe:	20 e1       	ldi	r18, 0x10	; 16
    1100:	3e e0       	ldi	r19, 0x0E	; 14
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__udivmodsi4>
    110a:	29 01       	movw	r4, r18
    110c:	3a 01       	movw	r6, r20
    110e:	4b 01       	movw	r8, r22
    1110:	5c 01       	movw	r10, r24
    1112:	69 ea       	ldi	r22, 0xA9	; 169
    1114:	71 e0       	ldi	r23, 0x01	; 1
    1116:	89 e4       	ldi	r24, 0x49	; 73
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <str_cpy>
    111e:	6d 2d       	mov	r22, r13
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	42 e0       	ldi	r20, 0x02	; 2
    1128:	89 e4       	ldi	r24, 0x49	; 73
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <str_writeudec16>
    1130:	69 81       	ldd	r22, Y+1	; 0x01
    1132:	7a 81       	ldd	r23, Y+2	; 0x02
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	42 e0       	ldi	r20, 0x02	; 2
    113a:	8c e4       	ldi	r24, 0x4C	; 76
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <str_writeudec16>
    1142:	44 e0       	ldi	r20, 0x04	; 4
    1144:	b7 01       	movw	r22, r14
    1146:	8f e4       	ldi	r24, 0x4F	; 79
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <str_writeudec16>
    114e:	42 e0       	ldi	r20, 0x02	; 2
    1150:	b2 01       	movw	r22, r4
    1152:	84 e5       	ldi	r24, 0x54	; 84
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 f6 08 	call	0x11ec	; 0x11ec <str_writeudec16>
    115a:	c5 01       	movw	r24, r10
    115c:	b4 01       	movw	r22, r8
    115e:	2c e3       	ldi	r18, 0x3C	; 60
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__udivmodsi4>
    116a:	49 01       	movw	r8, r18
    116c:	5a 01       	movw	r10, r20
    116e:	6b 01       	movw	r12, r22
    1170:	7c 01       	movw	r14, r24
    1172:	42 e0       	ldi	r20, 0x02	; 2
    1174:	b4 01       	movw	r22, r8
    1176:	87 e5       	ldi	r24, 0x57	; 87
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <str_writeudec16>
    117e:	42 e0       	ldi	r20, 0x02	; 2
    1180:	b6 01       	movw	r22, r12
    1182:	8a e5       	ldi	r24, 0x5A	; 90
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 f6 08 	call	0x11ec	; 0x11ec <str_writeudec16>
    118a:	89 e4       	ldi	r24, 0x49	; 73
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	bf 90       	pop	r11
    11a0:	af 90       	pop	r10
    11a2:	9f 90       	pop	r9
    11a4:	8f 90       	pop	r8
    11a6:	7f 90       	pop	r7
    11a8:	6f 90       	pop	r6
    11aa:	5f 90       	pop	r5
    11ac:	4f 90       	pop	r4
    11ae:	08 95       	ret

000011b0 <rtc_get_date_string>:
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	0e 94 8c 09 	call	0x1318	; 0x1318 <timer1_get>
    11b8:	00 91 ed 02 	lds	r16, 0x02ED	; 0x8002ed <rtc_base>
    11bc:	10 91 ee 02 	lds	r17, 0x02EE	; 0x8002ee <rtc_base+0x1>
    11c0:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <rtc_base+0x2>
    11c4:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <rtc_base+0x3>
    11c8:	60 0f       	add	r22, r16
    11ca:	71 1f       	adc	r23, r17
    11cc:	82 1f       	adc	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <rtc_num2datestr>

000011d8 <str_cpy>:
    11d8:	fc 01       	movw	r30, r24
    11da:	db 01       	movw	r26, r22
    11dc:	8d 91       	ld	r24, X+
    11de:	bd 01       	movw	r22, r26
    11e0:	88 23       	and	r24, r24
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <str_cpy+0x10>
    11e4:	81 93       	st	Z+, r24
    11e6:	f9 cf       	rjmp	.-14     	; 0x11da <str_cpy+0x2>
    11e8:	10 82       	st	Z, r1
    11ea:	08 95       	ret

000011ec <str_writeudec16>:
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	00 d0       	rcall	.+0      	; 0x1204 <str_writeudec16+0x18>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <str_writeudec16+0x1a>
    1206:	1f 92       	push	r1
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	fc 01       	movw	r30, r24
    120e:	6b 01       	movw	r12, r22
    1210:	9e 01       	movw	r18, r28
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	8e 01       	movw	r16, r28
    1218:	0a 5f       	subi	r16, 0xFA	; 250
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	ee 24       	eor	r14, r14
    121e:	e3 94       	inc	r14
    1220:	f1 2c       	mov	r15, r1
    1222:	9a e0       	ldi	r25, 0x0A	; 10
    1224:	99 2e       	mov	r9, r25
    1226:	9e 9c       	mul	r9, r14
    1228:	50 01       	movw	r10, r0
    122a:	9f 9c       	mul	r9, r15
    122c:	b0 0c       	add	r11, r0
    122e:	11 24       	eor	r1, r1
    1230:	c6 01       	movw	r24, r12
    1232:	b5 01       	movw	r22, r10
    1234:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
    1238:	b7 01       	movw	r22, r14
    123a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
    123e:	d9 01       	movw	r26, r18
    1240:	6d 93       	st	X+, r22
    1242:	9d 01       	movw	r18, r26
    1244:	c6 1a       	sub	r12, r22
    1246:	d1 08       	sbc	r13, r1
    1248:	67 fd       	sbrc	r22, 7
    124a:	d3 94       	inc	r13
    124c:	75 01       	movw	r14, r10
    124e:	a0 17       	cp	r26, r16
    1250:	b1 07       	cpc	r27, r17
    1252:	49 f7       	brne	.-46     	; 0x1226 <str_writeudec16+0x3a>
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	d8 01       	movw	r26, r16
    1260:	2e 91       	ld	r18, -X
    1262:	8d 01       	movw	r16, r26
    1264:	21 11       	cpse	r18, r1
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <str_writeudec16+0x86>
    1268:	61 15       	cp	r22, r1
    126a:	71 05       	cpc	r23, r1
    126c:	11 f4       	brne	.+4      	; 0x1272 <str_writeudec16+0x86>
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	41 f4       	brne	.+16     	; 0x1282 <str_writeudec16+0x96>
    1272:	84 17       	cp	r24, r20
    1274:	95 07       	cpc	r25, r21
    1276:	2c f4       	brge	.+10     	; 0x1282 <str_writeudec16+0x96>
    1278:	20 5d       	subi	r18, 0xD0	; 208
    127a:	21 93       	st	Z+, r18
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	04 c0       	rjmp	.+8      	; 0x128a <str_writeudec16+0x9e>
    1282:	84 17       	cp	r24, r20
    1284:	95 07       	cpc	r25, r21
    1286:	0c f4       	brge	.+2      	; 0x128a <str_writeudec16+0x9e>
    1288:	31 96       	adiw	r30, 0x01	; 1
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	40 f7       	brcc	.-48     	; 0x125e <str_writeudec16+0x72>
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	08 95       	ret

000012b0 <__vector_11>:
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <timer1_count>
    12c6:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <timer1_count+0x1>
    12ca:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <timer1_count+0x2>
    12ce:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <timer1_count+0x3>
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	a1 1d       	adc	r26, r1
    12d6:	b1 1d       	adc	r27, r1
    12d8:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <timer1_count>
    12dc:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <timer1_count+0x1>
    12e0:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <timer1_count+0x2>
    12e4:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <timer1_count+0x3>
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <timer1_init>:
    12fa:	83 e2       	ldi	r24, 0x23	; 35
    12fc:	94 ef       	ldi	r25, 0xF4	; 244
    12fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1302:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1306:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    130a:	8c e0       	ldi	r24, 0x0C	; 12
    130c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1316:	08 95       	ret

00001318 <timer1_get>:
    1318:	2f b7       	in	r18, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <timer1_count>
    1320:	70 91 dc 02 	lds	r23, 0x02DC	; 0x8002dc <timer1_count+0x1>
    1324:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <timer1_count+0x2>
    1328:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <timer1_count+0x3>
    132c:	2f bf       	out	0x3f, r18	; 63
    132e:	08 95       	ret

00001330 <timer1_clear>:
    1330:	8f b7       	in	r24, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <timer1_count>
    1338:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <timer1_count+0x1>
    133c:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <timer1_count+0x2>
    1340:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <timer1_count+0x3>
    1344:	8f bf       	out	0x3f, r24	; 63
    1346:	08 95       	ret

00001348 <uart_init>:
    1348:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_init>
    134c:	78 94       	sei
    134e:	08 95       	ret

00001350 <uart_writechar>:
    1350:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <serial_writechar>

00001354 <uart_writestr>:
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	ec 01       	movw	r28, r24
    135a:	89 91       	ld	r24, Y+
    135c:	88 23       	and	r24, r24
    135e:	19 f0       	breq	.+6      	; 0x1366 <uart_writestr+0x12>
    1360:	0e 94 66 0c 	call	0x18cc	; 0x18cc <serial_writechar>
    1364:	fa cf       	rjmp	.-12     	; 0x135a <uart_writestr+0x6>
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <uart_writehex8>:
    136c:	cf 93       	push	r28
    136e:	c8 2f       	mov	r28, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	24 e0       	ldi	r18, 0x04	; 4
    1374:	95 95       	asr	r25
    1376:	87 95       	ror	r24
    1378:	2a 95       	dec	r18
    137a:	e1 f7       	brne	.-8      	; 0x1374 <uart_writehex8+0x8>
    137c:	8a 30       	cpi	r24, 0x0A	; 10
    137e:	10 f4       	brcc	.+4      	; 0x1384 <uart_writehex8+0x18>
    1380:	80 5d       	subi	r24, 0xD0	; 208
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <uart_writehex8+0x1a>
    1384:	89 5c       	subi	r24, 0xC9	; 201
    1386:	0e 94 66 0c 	call	0x18cc	; 0x18cc <serial_writechar>
    138a:	8c 2f       	mov	r24, r28
    138c:	8f 70       	andi	r24, 0x0F	; 15
    138e:	8a 30       	cpi	r24, 0x0A	; 10
    1390:	10 f0       	brcs	.+4      	; 0x1396 <uart_writehex8+0x2a>
    1392:	89 5c       	subi	r24, 0xC9	; 201
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <uart_writehex8+0x2c>
    1396:	80 5d       	subi	r24, 0xD0	; 208
    1398:	cf 91       	pop	r28
    139a:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <serial_writechar>

0000139e <uart_writehex16>:
    139e:	cf 93       	push	r28
    13a0:	c8 2f       	mov	r28, r24
    13a2:	89 2f       	mov	r24, r25
    13a4:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_writehex8>
    13a8:	8c 2f       	mov	r24, r28
    13aa:	cf 91       	pop	r28
    13ac:	0c 94 b6 09 	jmp	0x136c	; 0x136c <uart_writehex8>

000013b0 <uart_writedec32>:
    13b0:	2f 92       	push	r2
    13b2:	3f 92       	push	r3
    13b4:	4f 92       	push	r4
    13b6:	5f 92       	push	r5
    13b8:	6f 92       	push	r6
    13ba:	7f 92       	push	r7
    13bc:	8f 92       	push	r8
    13be:	9f 92       	push	r9
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	63 97       	sbiw	r28, 0x13	; 19
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	6b 01       	movw	r12, r22
    13e6:	7c 01       	movw	r14, r24
    13e8:	97 ff       	sbrs	r25, 7
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <uart_writedec32+0x56>
    13ec:	f0 94       	com	r15
    13ee:	e0 94       	com	r14
    13f0:	d0 94       	com	r13
    13f2:	c0 94       	com	r12
    13f4:	c1 1c       	adc	r12, r1
    13f6:	d1 1c       	adc	r13, r1
    13f8:	e1 1c       	adc	r14, r1
    13fa:	f1 1c       	adc	r15, r1
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9b 8b       	std	Y+19, r25	; 0x13
    1402:	8a 8b       	std	Y+18, r24	; 0x12
    1404:	02 c0       	rjmp	.+4      	; 0x140a <uart_writedec32+0x5a>
    1406:	1b 8a       	std	Y+19, r1	; 0x13
    1408:	1a 8a       	std	Y+18, r1	; 0x12
    140a:	fe 01       	movw	r30, r28
    140c:	31 96       	adiw	r30, 0x01	; 1
    140e:	5f 01       	movw	r10, r30
    1410:	8e 01       	movw	r16, r28
    1412:	05 5f       	subi	r16, 0xF5	; 245
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	f9 8b       	std	Y+17, r31	; 0x11
    1418:	e8 8b       	std	Y+16, r30	; 0x10
    141a:	66 24       	eor	r6, r6
    141c:	63 94       	inc	r6
    141e:	71 2c       	mov	r7, r1
    1420:	81 2c       	mov	r8, r1
    1422:	91 2c       	mov	r9, r1
    1424:	aa e0       	ldi	r26, 0x0A	; 10
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	93 01       	movw	r18, r6
    142a:	a4 01       	movw	r20, r8
    142c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
    1430:	1b 01       	movw	r2, r22
    1432:	2c 01       	movw	r4, r24
    1434:	c7 01       	movw	r24, r14
    1436:	b6 01       	movw	r22, r12
    1438:	91 01       	movw	r18, r2
    143a:	a2 01       	movw	r20, r4
    143c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodsi4>
    1440:	93 01       	movw	r18, r6
    1442:	a4 01       	movw	r20, r8
    1444:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodsi4>
    1448:	e8 89       	ldd	r30, Y+16	; 0x10
    144a:	f9 89       	ldd	r31, Y+17	; 0x11
    144c:	21 93       	st	Z+, r18
    144e:	f9 8b       	std	Y+17, r31	; 0x11
    1450:	e8 8b       	std	Y+16, r30	; 0x10
    1452:	82 2f       	mov	r24, r18
    1454:	22 0f       	add	r18, r18
    1456:	99 0b       	sbc	r25, r25
    1458:	aa 0b       	sbc	r26, r26
    145a:	bb 0b       	sbc	r27, r27
    145c:	c8 1a       	sub	r12, r24
    145e:	d9 0a       	sbc	r13, r25
    1460:	ea 0a       	sbc	r14, r26
    1462:	fb 0a       	sbc	r15, r27
    1464:	31 01       	movw	r6, r2
    1466:	42 01       	movw	r8, r4
    1468:	0e 17       	cp	r16, r30
    146a:	1f 07       	cpc	r17, r31
    146c:	d9 f6       	brne	.-74     	; 0x1424 <uart_writedec32+0x74>
    146e:	8a 89       	ldd	r24, Y+18	; 0x12
    1470:	9b 89       	ldd	r25, Y+19	; 0x13
    1472:	89 2b       	or	r24, r25
    1474:	11 f0       	breq	.+4      	; 0x147a <uart_writedec32+0xca>
    1476:	8d e2       	ldi	r24, 0x2D	; 45
    1478:	01 c0       	rjmp	.+2      	; 0x147c <uart_writedec32+0xcc>
    147a:	80 e2       	ldi	r24, 0x20	; 32
    147c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <serial_writechar>
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	f8 01       	movw	r30, r16
    1486:	82 91       	ld	r24, -Z
    1488:	8f 01       	movw	r16, r30
    148a:	81 11       	cpse	r24, r1
    148c:	06 c0       	rjmp	.+12     	; 0x149a <uart_writedec32+0xea>
    148e:	21 15       	cp	r18, r1
    1490:	31 05       	cpc	r19, r1
    1492:	19 f4       	brne	.+6      	; 0x149a <uart_writedec32+0xea>
    1494:	ea 15       	cp	r30, r10
    1496:	fb 05       	cpc	r31, r11
    1498:	29 f4       	brne	.+10     	; 0x14a4 <uart_writedec32+0xf4>
    149a:	80 5d       	subi	r24, 0xD0	; 208
    149c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <serial_writechar>
    14a0:	21 e0       	ldi	r18, 0x01	; 1
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	0a 15       	cp	r16, r10
    14a6:	1b 05       	cpc	r17, r11
    14a8:	69 f7       	brne	.-38     	; 0x1484 <uart_writedec32+0xd4>
    14aa:	63 96       	adiw	r28, 0x13	; 19
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	bf 90       	pop	r11
    14c8:	af 90       	pop	r10
    14ca:	9f 90       	pop	r9
    14cc:	8f 90       	pop	r8
    14ce:	7f 90       	pop	r7
    14d0:	6f 90       	pop	r6
    14d2:	5f 90       	pop	r5
    14d4:	4f 90       	pop	r4
    14d6:	3f 90       	pop	r3
    14d8:	2f 90       	pop	r2
    14da:	08 95       	ret

000014dc <dump_eeprom>:
    14dc:	2f 92       	push	r2
    14de:	3f 92       	push	r3
    14e0:	4f 92       	push	r4
    14e2:	5f 92       	push	r5
    14e4:	6f 92       	push	r6
    14e6:	7f 92       	push	r7
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	64 97       	sbiw	r28, 0x14	; 20
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	8c 01       	movw	r16, r24
    1512:	61 15       	cp	r22, r1
    1514:	71 05       	cpc	r23, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <dump_eeprom+0x3e>
    1518:	92 c0       	rjmp	.+292    	; 0x163e <dump_eeprom+0x162>
    151a:	81 2c       	mov	r8, r1
    151c:	91 2c       	mov	r9, r1
    151e:	54 01       	movw	r10, r8
    1520:	cb 01       	movw	r24, r22
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	89 8b       	std	Y+17, r24	; 0x11
    1528:	9a 8b       	std	Y+18, r25	; 0x12
    152a:	ab 8b       	std	Y+19, r26	; 0x13
    152c:	bc 8b       	std	Y+20, r27	; 0x14
    152e:	de 01       	movw	r26, r28
    1530:	11 96       	adiw	r26, 0x01	; 1
    1532:	1d 01       	movw	r2, r26
    1534:	89 89       	ldd	r24, Y+17	; 0x11
    1536:	9a 89       	ldd	r25, Y+18	; 0x12
    1538:	ab 89       	ldd	r26, Y+19	; 0x13
    153a:	bc 89       	ldd	r27, Y+20	; 0x14
    153c:	88 16       	cp	r8, r24
    153e:	99 06       	cpc	r9, r25
    1540:	aa 06       	cpc	r10, r26
    1542:	bb 06       	cpc	r11, r27
    1544:	08 f0       	brcs	.+2      	; 0x1548 <dump_eeprom+0x6c>
    1546:	7b c0       	rjmp	.+246    	; 0x163e <dump_eeprom+0x162>
    1548:	81 2f       	mov	r24, r17
    154a:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_writehex8>
    154e:	80 2f       	mov	r24, r16
    1550:	80 7f       	andi	r24, 0xF0	; 240
    1552:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_writehex8>
    1556:	80 e2       	ldi	r24, 0x20	; 32
    1558:	0e 94 a8 09 	call	0x1350	; 0x1350 <uart_writechar>
    155c:	61 01       	movw	r12, r2
    155e:	78 01       	movw	r14, r16
    1560:	41 2c       	mov	r4, r1
    1562:	51 2c       	mov	r5, r1
    1564:	32 01       	movw	r6, r4
    1566:	41 e0       	ldi	r20, 0x01	; 1
    1568:	b6 01       	movw	r22, r12
    156a:	c7 01       	movw	r24, r14
    156c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <eeprom_readbuf>
    1570:	bf ef       	ldi	r27, 0xFF	; 255
    1572:	eb 1a       	sub	r14, r27
    1574:	fb 0a       	sbc	r15, r27
    1576:	ef ef       	ldi	r30, 0xFF	; 255
    1578:	4e 1a       	sub	r4, r30
    157a:	5e 0a       	sbc	r5, r30
    157c:	6e 0a       	sbc	r6, r30
    157e:	7e 0a       	sbc	r7, r30
    1580:	ff ef       	ldi	r31, 0xFF	; 255
    1582:	8f 1a       	sub	r8, r31
    1584:	9f 0a       	sbc	r9, r31
    1586:	af 0a       	sbc	r10, r31
    1588:	bf 0a       	sbc	r11, r31
    158a:	89 89       	ldd	r24, Y+17	; 0x11
    158c:	9a 89       	ldd	r25, Y+18	; 0x12
    158e:	ab 89       	ldd	r26, Y+19	; 0x13
    1590:	bc 89       	ldd	r27, Y+20	; 0x14
    1592:	88 16       	cp	r8, r24
    1594:	99 06       	cpc	r9, r25
    1596:	aa 06       	cpc	r10, r26
    1598:	bb 06       	cpc	r11, r27
    159a:	50 f0       	brcs	.+20     	; 0x15b0 <dump_eeprom+0xd4>
    159c:	68 01       	movw	r12, r16
    159e:	9f e0       	ldi	r25, 0x0F	; 15
    15a0:	c9 22       	and	r12, r25
    15a2:	dd 24       	eor	r13, r13
    15a4:	00 e0       	ldi	r16, 0x00	; 0
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	32 01       	movw	r6, r4
    15aa:	6c 0c       	add	r6, r12
    15ac:	7d 1c       	adc	r7, r13
    15ae:	09 c0       	rjmp	.+18     	; 0x15c2 <dump_eeprom+0xe6>
    15b0:	af ef       	ldi	r26, 0xFF	; 255
    15b2:	ca 1a       	sub	r12, r26
    15b4:	da 0a       	sbc	r13, r26
    15b6:	c7 01       	movw	r24, r14
    15b8:	8f 70       	andi	r24, 0x0F	; 15
    15ba:	99 27       	eor	r25, r25
    15bc:	89 2b       	or	r24, r25
    15be:	99 f6       	brne	.-90     	; 0x1566 <dump_eeprom+0x8a>
    15c0:	ed cf       	rjmp	.-38     	; 0x159c <dump_eeprom+0xc0>
    15c2:	0c 15       	cp	r16, r12
    15c4:	1d 05       	cpc	r17, r13
    15c6:	18 f0       	brcs	.+6      	; 0x15ce <dump_eeprom+0xf2>
    15c8:	06 15       	cp	r16, r6
    15ca:	17 05       	cpc	r17, r7
    15cc:	28 f0       	brcs	.+10     	; 0x15d8 <dump_eeprom+0xfc>
    15ce:	8d eb       	ldi	r24, 0xBD	; 189
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    15d6:	0b c0       	rjmp	.+22     	; 0x15ee <dump_eeprom+0x112>
    15d8:	f8 01       	movw	r30, r16
    15da:	ec 19       	sub	r30, r12
    15dc:	fd 09       	sbc	r31, r13
    15de:	e2 0d       	add	r30, r2
    15e0:	f3 1d       	adc	r31, r3
    15e2:	80 81       	ld	r24, Z
    15e4:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_writehex8>
    15e8:	80 e2       	ldi	r24, 0x20	; 32
    15ea:	0e 94 a8 09 	call	0x1350	; 0x1350 <uart_writechar>
    15ee:	0f 5f       	subi	r16, 0xFF	; 255
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	00 31       	cpi	r16, 0x10	; 16
    15f4:	11 05       	cpc	r17, r1
    15f6:	29 f7       	brne	.-54     	; 0x15c2 <dump_eeprom+0xe6>
    15f8:	00 e0       	ldi	r16, 0x00	; 0
    15fa:	10 e0       	ldi	r17, 0x00	; 0
    15fc:	c0 16       	cp	r12, r16
    15fe:	d1 06       	cpc	r13, r17
    1600:	31 f0       	breq	.+12     	; 0x160e <dump_eeprom+0x132>
    1602:	80 e2       	ldi	r24, 0x20	; 32
    1604:	0e 94 a8 09 	call	0x1350	; 0x1350 <uart_writechar>
    1608:	0f 5f       	subi	r16, 0xFF	; 255
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	f7 cf       	rjmp	.-18     	; 0x15fc <dump_eeprom+0x120>
    160e:	81 01       	movw	r16, r2
    1610:	c8 01       	movw	r24, r16
    1612:	82 19       	sub	r24, r2
    1614:	93 09       	sbc	r25, r3
    1616:	84 15       	cp	r24, r4
    1618:	95 05       	cpc	r25, r5
    161a:	58 f4       	brcc	.+22     	; 0x1632 <dump_eeprom+0x156>
    161c:	f8 01       	movw	r30, r16
    161e:	81 91       	ld	r24, Z+
    1620:	8f 01       	movw	r16, r30
    1622:	90 ee       	ldi	r25, 0xE0	; 224
    1624:	98 0f       	add	r25, r24
    1626:	90 36       	cpi	r25, 0x60	; 96
    1628:	08 f0       	brcs	.+2      	; 0x162c <dump_eeprom+0x150>
    162a:	8e e2       	ldi	r24, 0x2E	; 46
    162c:	0e 94 a8 09 	call	0x1350	; 0x1350 <uart_writechar>
    1630:	ef cf       	rjmp	.-34     	; 0x1610 <dump_eeprom+0x134>
    1632:	81 ec       	ldi	r24, 0xC1	; 193
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	0e 94 aa 09 	call	0x1354	; 0x1354 <uart_writestr>
    163a:	87 01       	movw	r16, r14
    163c:	7b cf       	rjmp	.-266    	; 0x1534 <dump_eeprom+0x58>
    163e:	64 96       	adiw	r28, 0x14	; 20
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	cf 90       	pop	r12
    165a:	bf 90       	pop	r11
    165c:	af 90       	pop	r10
    165e:	9f 90       	pop	r9
    1660:	8f 90       	pop	r8
    1662:	7f 90       	pop	r7
    1664:	6f 90       	pop	r6
    1666:	5f 90       	pop	r5
    1668:	4f 90       	pop	r4
    166a:	3f 90       	pop	r3
    166c:	2f 90       	pop	r2
    166e:	08 95       	ret

00001670 <__vector_14>:
    1670:	1f 92       	push	r1
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	0f 92       	push	r0
    1678:	11 24       	eor	r1, r1
    167a:	2f 93       	push	r18
    167c:	3f 93       	push	r19
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <delay_count>
    1686:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <delay_count+0x1>
    168a:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <delay_limit>
    168e:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <delay_limit+0x1>
    1692:	28 17       	cp	r18, r24
    1694:	39 07       	cpc	r19, r25
    1696:	49 f0       	breq	.+18     	; 0x16aa <__vector_14+0x3a>
    1698:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <delay_count>
    169c:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <delay_count+0x1>
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <delay_count+0x1>
    16a6:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <delay_count>
    16aa:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <delay_count+0x2>
    16ae:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <delay_count+0x3>
    16b2:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <delay_limit+0x2>
    16b6:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <delay_limit+0x3>
    16ba:	28 17       	cp	r18, r24
    16bc:	39 07       	cpc	r19, r25
    16be:	49 f0       	breq	.+18     	; 0x16d2 <__vector_14+0x62>
    16c0:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <delay_count+0x2>
    16c4:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <delay_count+0x3>
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <delay_count+0x3>
    16ce:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <delay_count+0x2>
    16d2:	9f 91       	pop	r25
    16d4:	8f 91       	pop	r24
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <delay_init>:
    16e4:	89 ef       	ldi	r24, 0xF9	; 249
    16e6:	87 bd       	out	0x27, r24	; 39
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	84 bd       	out	0x24, r24	; 36
    16ec:	93 e0       	ldi	r25, 0x03	; 3
    16ee:	95 bd       	out	0x25, r25	; 37
    16f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    16f4:	08 95       	ret

000016f6 <delay_get>:
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	91 05       	cpc	r25, r1
    16fa:	50 f4       	brcc	.+20     	; 0x1710 <delay_get+0x1a>
    16fc:	f8 94       	cli
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	fc 01       	movw	r30, r24
    1704:	eb 51       	subi	r30, 0x1B	; 27
    1706:	fd 4f       	sbci	r31, 0xFD	; 253
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	78 94       	sei
    170e:	08 95       	ret
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	08 95       	ret

00001716 <delay_isdone>:
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	91 05       	cpc	r25, r1
    171a:	98 f4       	brcc	.+38     	; 0x1742 <delay_isdone+0x2c>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	fc 01       	movw	r30, r24
    1722:	eb 51       	subi	r30, 0x1B	; 27
    1724:	fd 4f       	sbci	r31, 0xFD	; 253
    1726:	20 81       	ld	r18, Z
    1728:	31 81       	ldd	r19, Z+1	; 0x01
    172a:	fc 01       	movw	r30, r24
    172c:	ef 51       	subi	r30, 0x1F	; 31
    172e:	fd 4f       	sbci	r31, 0xFD	; 253
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	40 81       	ld	r20, Z
    1736:	51 81       	ldd	r21, Z+1	; 0x01
    1738:	42 17       	cp	r20, r18
    173a:	53 07       	cpc	r21, r19
    173c:	21 f0       	breq	.+8      	; 0x1746 <delay_isdone+0x30>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	08 95       	ret
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	08 95       	ret

00001748 <delay_set>:
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    1752:	8b 01       	movw	r16, r22
    1754:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <initialized.1590>
    1758:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <initialized.1590+0x1>
    175c:	89 2b       	or	r24, r25
    175e:	41 f4       	brne	.+16     	; 0x1770 <delay_set+0x28>
    1760:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <delay_init>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <initialized.1590+0x1>
    176c:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <initialized.1590>
    1770:	c2 30       	cpi	r28, 0x02	; 2
    1772:	d1 05       	cpc	r29, r1
    1774:	70 f4       	brcc	.+28     	; 0x1792 <delay_set+0x4a>
    1776:	8f b7       	in	r24, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	cc 0f       	add	r28, r28
    177c:	dd 1f       	adc	r29, r29
    177e:	fe 01       	movw	r30, r28
    1780:	ef 51       	subi	r30, 0x1F	; 31
    1782:	fd 4f       	sbci	r31, 0xFD	; 253
    1784:	11 83       	std	Z+1, r17	; 0x01
    1786:	00 83       	st	Z, r16
    1788:	cb 51       	subi	r28, 0x1B	; 27
    178a:	dd 4f       	sbci	r29, 0xFD	; 253
    178c:	19 82       	std	Y+1, r1	; 0x01
    178e:	18 82       	st	Y, r1
    1790:	8f bf       	out	0x3f, r24	; 63
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <serial_init>:
    179c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    17a0:	87 e6       	ldi	r24, 0x67	; 103
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    17a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    17ac:	e1 ec       	ldi	r30, 0xC1	; 193
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	88 e1       	ldi	r24, 0x18	; 24
    17b2:	80 83       	st	Z, r24
    17b4:	86 e0       	ldi	r24, 0x06	; 6
    17b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    17ba:	80 81       	ld	r24, Z
    17bc:	80 6a       	ori	r24, 0xA0	; 160
    17be:	80 83       	st	Z, r24
    17c0:	08 95       	ret

000017c2 <__vector_18>:
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	8f 93       	push	r24
    17d0:	9f 93       	push	r25
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <rxtail>
    17da:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <rxhead>
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	82 1b       	sub	r24, r18
    17e2:	91 09       	sbc	r25, r1
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	8f 73       	andi	r24, 0x3F	; 63
    17e8:	99 27       	eor	r25, r25
    17ea:	89 2b       	or	r24, r25
    17ec:	79 f0       	breq	.+30     	; 0x180c <__vector_18+0x4a>
    17ee:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <rxhead>
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    17f8:	ef 50       	subi	r30, 0x0F	; 15
    17fa:	fd 4f       	sbci	r31, 0xFD	; 253
    17fc:	80 83       	st	Z, r24
    17fe:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <rxhead>
    1802:	8f 5f       	subi	r24, 0xFF	; 255
    1804:	8f 73       	andi	r24, 0x3F	; 63
    1806:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <rxhead>
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <__vector_18+0x4e>
    180c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1810:	ff 91       	pop	r31
    1812:	ef 91       	pop	r30
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <__vector_19>:
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	2f 93       	push	r18
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	ef 93       	push	r30
    1836:	ff 93       	push	r31
    1838:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <txhead>
    183c:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <txtail>
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	82 1b       	sub	r24, r18
    1844:	91 09       	sbc	r25, r1
    1846:	8f 73       	andi	r24, 0x3F	; 63
    1848:	99 27       	eor	r25, r25
    184a:	89 2b       	or	r24, r25
    184c:	79 f0       	breq	.+30     	; 0x186c <__vector_19+0x48>
    184e:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <txtail>
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	ef 5c       	subi	r30, 0xCF	; 207
    1856:	fc 4f       	sbci	r31, 0xFC	; 252
    1858:	80 81       	ld	r24, Z
    185a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    185e:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <txtail>
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	8f 73       	andi	r24, 0x3F	; 63
    1866:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <txtail>
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <__vector_19+0x52>
    186c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1870:	8f 7d       	andi	r24, 0xDF	; 223
    1872:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <serial_rxchars>:
    188a:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <rxhead>
    188e:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <rxtail>
    1892:	89 1b       	sub	r24, r25
    1894:	8f 73       	andi	r24, 0x3F	; 63
    1896:	08 95       	ret

00001898 <serial_popchar>:
    1898:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <rxhead>
    189c:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <rxtail>
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	82 1b       	sub	r24, r18
    18a4:	91 09       	sbc	r25, r1
    18a6:	8f 73       	andi	r24, 0x3F	; 63
    18a8:	99 27       	eor	r25, r25
    18aa:	89 2b       	or	r24, r25
    18ac:	69 f0       	breq	.+26     	; 0x18c8 <serial_popchar+0x30>
    18ae:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <rxtail>
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	ef 50       	subi	r30, 0x0F	; 15
    18b6:	fd 4f       	sbci	r31, 0xFD	; 253
    18b8:	80 81       	ld	r24, Z
    18ba:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <rxtail>
    18be:	9f 5f       	subi	r25, 0xFF	; 255
    18c0:	9f 73       	andi	r25, 0x3F	; 63
    18c2:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <rxtail>
    18c6:	08 95       	ret
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	08 95       	ret

000018cc <serial_writechar>:
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	07 fe       	sbrs	r0, 7
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <serial_writechar+0x22>
    18d2:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <txtail>
    18d6:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <txhead>
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	29 1b       	sub	r18, r25
    18de:	31 09       	sbc	r19, r1
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	31 09       	sbc	r19, r1
    18e4:	2f 73       	andi	r18, 0x3F	; 63
    18e6:	33 27       	eor	r19, r19
    18e8:	23 2b       	or	r18, r19
    18ea:	99 f3       	breq	.-26     	; 0x18d2 <serial_writechar+0x6>
    18ec:	0d c0       	rjmp	.+26     	; 0x1908 <serial_writechar+0x3c>
    18ee:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <txtail>
    18f2:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <txhead>
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	29 1b       	sub	r18, r25
    18fa:	31 09       	sbc	r19, r1
    18fc:	21 50       	subi	r18, 0x01	; 1
    18fe:	31 09       	sbc	r19, r1
    1900:	2f 73       	andi	r18, 0x3F	; 63
    1902:	33 27       	eor	r19, r19
    1904:	23 2b       	or	r18, r19
    1906:	61 f0       	breq	.+24     	; 0x1920 <serial_writechar+0x54>
    1908:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <txhead>
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	ef 5c       	subi	r30, 0xCF	; 207
    1910:	fc 4f       	sbci	r31, 0xFC	; 252
    1912:	80 83       	st	Z, r24
    1914:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <txhead>
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	8f 73       	andi	r24, 0x3F	; 63
    191c:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <txhead>
    1920:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1924:	80 62       	ori	r24, 0x20	; 32
    1926:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    192a:	08 95       	ret

0000192c <serial_writestr>:
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	11 e0       	ldi	r17, 0x01	; 1
    1938:	18 0f       	add	r17, r24
    193a:	fe 01       	movw	r30, r28
    193c:	e8 0f       	add	r30, r24
    193e:	f1 1d       	adc	r31, r1
    1940:	80 81       	ld	r24, Z
    1942:	88 23       	and	r24, r24
    1944:	21 f0       	breq	.+8      	; 0x194e <serial_writestr+0x22>
    1946:	0e 94 66 0c 	call	0x18cc	; 0x18cc <serial_writechar>
    194a:	81 2f       	mov	r24, r17
    194c:	f4 cf       	rjmp	.-24     	; 0x1936 <serial_writestr+0xa>
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	08 95       	ret

00001956 <serial_writestr_P>:
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	ec 01       	movw	r28, r24
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	11 e0       	ldi	r17, 0x01	; 1
    1962:	18 0f       	add	r17, r24
    1964:	fe 01       	movw	r30, r28
    1966:	e8 0f       	add	r30, r24
    1968:	f1 1d       	adc	r31, r1
    196a:	84 91       	lpm	r24, Z
    196c:	88 23       	and	r24, r24
    196e:	21 f0       	breq	.+8      	; 0x1978 <serial_writestr_P+0x22>
    1970:	0e 94 66 0c 	call	0x18cc	; 0x18cc <serial_writechar>
    1974:	81 2f       	mov	r24, r17
    1976:	f4 cf       	rjmp	.-24     	; 0x1960 <serial_writestr_P+0xa>
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	08 95       	ret

00001980 <__mulsi3>:
    1980:	db 01       	movw	r26, r22
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__muluhisi3>
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	a2 9f       	mul	r26, r18
    1990:	80 0d       	add	r24, r0
    1992:	91 1d       	adc	r25, r1
    1994:	a3 9f       	mul	r26, r19
    1996:	90 0d       	add	r25, r0
    1998:	b2 9f       	mul	r27, r18
    199a:	90 0d       	add	r25, r0
    199c:	11 24       	eor	r1, r1
    199e:	08 95       	ret

000019a0 <__udivmodhi4>:
    19a0:	aa 1b       	sub	r26, r26
    19a2:	bb 1b       	sub	r27, r27
    19a4:	51 e1       	ldi	r21, 0x11	; 17
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <__udivmodhi4_ep>

000019a8 <__udivmodhi4_loop>:
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	a6 17       	cp	r26, r22
    19ae:	b7 07       	cpc	r27, r23
    19b0:	10 f0       	brcs	.+4      	; 0x19b6 <__udivmodhi4_ep>
    19b2:	a6 1b       	sub	r26, r22
    19b4:	b7 0b       	sbc	r27, r23

000019b6 <__udivmodhi4_ep>:
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	5a 95       	dec	r21
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__udivmodhi4_loop>
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	08 95       	ret

000019c8 <__divmodhi4>:
    19c8:	97 fb       	bst	r25, 7
    19ca:	07 2e       	mov	r0, r23
    19cc:	16 f4       	brtc	.+4      	; 0x19d2 <__divmodhi4+0xa>
    19ce:	00 94       	com	r0
    19d0:	07 d0       	rcall	.+14     	; 0x19e0 <__divmodhi4_neg1>
    19d2:	77 fd       	sbrc	r23, 7
    19d4:	09 d0       	rcall	.+18     	; 0x19e8 <__divmodhi4_neg2>
    19d6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
    19da:	07 fc       	sbrc	r0, 7
    19dc:	05 d0       	rcall	.+10     	; 0x19e8 <__divmodhi4_neg2>
    19de:	3e f4       	brtc	.+14     	; 0x19ee <__divmodhi4_exit>

000019e0 <__divmodhi4_neg1>:
    19e0:	90 95       	com	r25
    19e2:	81 95       	neg	r24
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	08 95       	ret

000019e8 <__divmodhi4_neg2>:
    19e8:	70 95       	com	r23
    19ea:	61 95       	neg	r22
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255

000019ee <__divmodhi4_exit>:
    19ee:	08 95       	ret

000019f0 <__udivmodsi4>:
    19f0:	a1 e2       	ldi	r26, 0x21	; 33
    19f2:	1a 2e       	mov	r1, r26
    19f4:	aa 1b       	sub	r26, r26
    19f6:	bb 1b       	sub	r27, r27
    19f8:	fd 01       	movw	r30, r26
    19fa:	0d c0       	rjmp	.+26     	; 0x1a16 <__udivmodsi4_ep>

000019fc <__udivmodsi4_loop>:
    19fc:	aa 1f       	adc	r26, r26
    19fe:	bb 1f       	adc	r27, r27
    1a00:	ee 1f       	adc	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	a2 17       	cp	r26, r18
    1a06:	b3 07       	cpc	r27, r19
    1a08:	e4 07       	cpc	r30, r20
    1a0a:	f5 07       	cpc	r31, r21
    1a0c:	20 f0       	brcs	.+8      	; 0x1a16 <__udivmodsi4_ep>
    1a0e:	a2 1b       	sub	r26, r18
    1a10:	b3 0b       	sbc	r27, r19
    1a12:	e4 0b       	sbc	r30, r20
    1a14:	f5 0b       	sbc	r31, r21

00001a16 <__udivmodsi4_ep>:
    1a16:	66 1f       	adc	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	1a 94       	dec	r1
    1a20:	69 f7       	brne	.-38     	; 0x19fc <__udivmodsi4_loop>
    1a22:	60 95       	com	r22
    1a24:	70 95       	com	r23
    1a26:	80 95       	com	r24
    1a28:	90 95       	com	r25
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	ac 01       	movw	r20, r24
    1a2e:	bd 01       	movw	r22, r26
    1a30:	cf 01       	movw	r24, r30
    1a32:	08 95       	ret

00001a34 <__divmodsi4>:
    1a34:	05 2e       	mov	r0, r21
    1a36:	97 fb       	bst	r25, 7
    1a38:	1e f4       	brtc	.+6      	; 0x1a40 <__divmodsi4+0xc>
    1a3a:	00 94       	com	r0
    1a3c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__negsi2>
    1a40:	57 fd       	sbrc	r21, 7
    1a42:	07 d0       	rcall	.+14     	; 0x1a52 <__divmodsi4_neg2>
    1a44:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__udivmodsi4>
    1a48:	07 fc       	sbrc	r0, 7
    1a4a:	03 d0       	rcall	.+6      	; 0x1a52 <__divmodsi4_neg2>
    1a4c:	4e f4       	brtc	.+18     	; 0x1a60 <__divmodsi4_exit>
    1a4e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__negsi2>

00001a52 <__divmodsi4_neg2>:
    1a52:	50 95       	com	r21
    1a54:	40 95       	com	r20
    1a56:	30 95       	com	r19
    1a58:	21 95       	neg	r18
    1a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255

00001a60 <__divmodsi4_exit>:
    1a60:	08 95       	ret

00001a62 <__negsi2>:
    1a62:	90 95       	com	r25
    1a64:	80 95       	com	r24
    1a66:	70 95       	com	r23
    1a68:	61 95       	neg	r22
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	08 95       	ret

00001a72 <__umulhisi3>:
    1a72:	a2 9f       	mul	r26, r18
    1a74:	b0 01       	movw	r22, r0
    1a76:	b3 9f       	mul	r27, r19
    1a78:	c0 01       	movw	r24, r0
    1a7a:	a3 9f       	mul	r26, r19
    1a7c:	70 0d       	add	r23, r0
    1a7e:	81 1d       	adc	r24, r1
    1a80:	11 24       	eor	r1, r1
    1a82:	91 1d       	adc	r25, r1
    1a84:	b2 9f       	mul	r27, r18
    1a86:	70 0d       	add	r23, r0
    1a88:	81 1d       	adc	r24, r1
    1a8a:	11 24       	eor	r1, r1
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	08 95       	ret

00001a90 <__muluhisi3>:
    1a90:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__umulhisi3>
    1a94:	a5 9f       	mul	r26, r21
    1a96:	90 0d       	add	r25, r0
    1a98:	b4 9f       	mul	r27, r20
    1a9a:	90 0d       	add	r25, r0
    1a9c:	a4 9f       	mul	r26, r20
    1a9e:	80 0d       	add	r24, r0
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	11 24       	eor	r1, r1
    1aa4:	08 95       	ret

00001aa6 <_exit>:
    1aa6:	f8 94       	cli

00001aa8 <__stop_program>:
    1aa8:	ff cf       	rjmp	.-2      	; 0x1aa8 <__stop_program>
